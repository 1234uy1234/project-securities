"""
Push Notification Service
G·ª≠i th√¥ng b√°o push cho employee khi c√≥ nhi·ªám v·ª• m·ªõi
"""
import json
import requests
from typing import List, Dict, Optional
from ..database import SessionLocal
from ..models import User, PatrolTask
import logging

logger = logging.getLogger(__name__)

class PushNotificationService:
    def __init__(self):
        # VAPID keys cho web push - S·ª¨ D·ª§NG KEYS TH·∫¨T
        self.vapid_public_key = "BGSuFsu3HNKp0o88tO-gWVzv2WCtmndy4hnkua0hN8EJUmTwJnBos8XwikcVXCRegKdPDcGtIP2JKiHYjiGNHV4"
        self.vapid_private_key = "rmDQdvdvBLfhQQ5KTI6jN9AaRS_MN3ClR81tCfkHiKg"
        self.vapid_claims = {
            "sub": "mailto:admin@manhtoanplastic.com"
        }
    
    async def send_task_assignment_notification(
        self, 
        task_id: int, 
        assigned_to_user_id: int,
        task_title: str,
        task_description: str = None
    ):
        """G·ª≠i th√¥ng b√°o khi giao nhi·ªám v·ª• m·ªõi"""
        try:
            db = SessionLocal()
            
            # L·∫•y th√¥ng tin user
            user = db.query(User).filter(User.id == assigned_to_user_id).first()
            if not user:
                logger.error(f"User {assigned_to_user_id} not found")
                return False
            
            # L·∫•y th√¥ng tin task
            task = db.query(PatrolTask).filter(PatrolTask.id == task_id).first()
            if not task:
                logger.error(f"Task {task_id} not found")
                return False
            
            # T·∫°o n·ªôi dung th√¥ng b√°o
            notification_data = {
                "title": "üéØ Nhi·ªám v·ª• m·ªõi ƒë∆∞·ª£c giao",
                "body": f"B·∫°n c√≥ nhi·ªám v·ª• m·ªõi: {task_title}",
                "icon": "/icon-192x192.png",
                "badge": "/icon-96x96.png",
                "data": {
                    "type": "task_assignment",
                    "task_id": task_id,
                    "task_title": task_title,
                    "task_description": task_description,
                    "assigned_to": user.full_name,
                    "url": "/tasks"
                },
                "actions": [
                    {
                        "action": "view_task",
                        "title": "Xem nhi·ªám v·ª•",
                        "icon": "/icon-192x192.png"
                    },
                    {
                        "action": "dismiss",
                        "title": "ƒê√≥ng"
                    }
                ],
                "requireInteraction": True,
                "vibrate": [200, 100, 200],
                "tag": f"task_{task_id}"
            }
            
            # G·ª≠i th√¥ng b√°o
            success = await self._send_notification_to_user(user.id, notification_data)
            
            db.close()
            return success
            
        except Exception as e:
            logger.error(f"Error sending task assignment notification: {e}")
            return False
    
    async def send_checkin_reminder_notification(
        self, 
        user_id: int,
        task_title: str,
        location_name: str
    ):
        """G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü ch·∫•m c√¥ng"""
        try:
            notification_data = {
                "title": "‚è∞ Nh·∫Øc nh·ªü ch·∫•m c√¥ng",
                "body": f"Nhi·ªám v·ª• '{task_title}' t·∫°i {location_name} s·∫Øp ƒë·∫øn gi·ªù",
                "icon": "/icon-192x192.png",
                "badge": "/icon-96x96.png",
                "data": {
                    "type": "checkin_reminder",
                    "task_title": task_title,
                    "location_name": location_name,
                    "url": "/employee-dashboard"
                },
                "actions": [
                    {
                        "action": "checkin_now",
                        "title": "Ch·∫•m c√¥ng ngay",
                        "icon": "/icon-192x192.png"
                    },
                    {
                        "action": "dismiss",
                        "title": "ƒê√≥ng"
                    }
                ],
                "requireInteraction": True,
                "vibrate": [100, 50, 100],
                "tag": f"reminder_{user_id}"
            }
            
            return await self._send_notification_to_user(user_id, notification_data)
            
        except Exception as e:
            logger.error(f"Error sending checkin reminder notification: {e}")
            return False
    
    async def send_task_completion_notification(
        self,
        task_id: int,
        user_id: int,
        task_title: str
    ):
        """G·ª≠i th√¥ng b√°o khi ho√†n th√†nh nhi·ªám v·ª•"""
        try:
            notification_data = {
                "title": "‚úÖ Nhi·ªám v·ª• ho√†n th√†nh",
                "body": f"B·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª•: {task_title}",
                "icon": "/icon-192x192.png",
                "badge": "/icon-96x96.png",
                "data": {
                    "type": "task_completion",
                    "task_id": task_id,
                    "task_title": task_title,
                    "url": "/reports"
                },
                "actions": [
                    {
                        "action": "view_report",
                        "title": "Xem b√°o c√°o",
                        "icon": "/icon-192x192.png"
                    },
                    {
                        "action": "dismiss",
                        "title": "ƒê√≥ng"
                    }
                ],
                "requireInteraction": False,
                "vibrate": [200, 100, 200],
                "tag": f"completion_{task_id}"
            }
            
            return await self._send_notification_to_user(user_id, notification_data)
            
        except Exception as e:
            logger.error(f"Error sending task completion notification: {e}")
            return False
    
    async def _send_notification_to_user(self, user_id: int, notification_data: Dict):
        """G·ª≠i th√¥ng b√°o ƒë·∫øn user c·ª• th·ªÉ"""
        try:
            db = SessionLocal()
            
            # L·∫•y subscription c·ªßa user (s·∫Ω l∆∞u trong database)
            # T·∫°m th·ªùi g·ª≠i ƒë·∫øn t·∫•t c·∫£ subscription ƒë√£ ƒëƒÉng k√Ω
            subscriptions = self._get_user_subscriptions(user_id)
            
            if not subscriptions:
                logger.info(f"No subscriptions found for user {user_id}")
                return False
            
            success_count = 0
            for subscription in subscriptions:
                try:
                    # G·ª≠i th√¥ng b√°o qua web push
                    result = await self._send_web_push(subscription, notification_data)
                    if result:
                        success_count += 1
                except Exception as e:
                    logger.error(f"Error sending to subscription {subscription}: {e}")
            
            db.close()
            return success_count > 0
            
        except Exception as e:
            logger.error(f"Error in _send_notification_to_user: {e}")
            return False
    
    def _get_user_subscriptions(self, user_id: int) -> List[Dict]:
        """L·∫•y danh s√°ch subscription c·ªßa user"""
        try:
            # Import push_subscriptions t·ª´ routes/push.py
            from ..routes.push import push_subscriptions
            
            # L·ªçc subscription c·ªßa user c·ª• th·ªÉ
            user_subscriptions = [
                sub for sub in push_subscriptions 
                if sub.get("user_id") == user_id
            ]
            
            logger.info(f"Found {len(user_subscriptions)} subscriptions for user {user_id}")
            return user_subscriptions
            
        except Exception as e:
            logger.error(f"Error getting user subscriptions: {e}")
            return []
    
    async def _send_web_push(self, subscription: Dict, notification_data: Dict) -> bool:
        """G·ª≠i web push notification TH·∫¨T"""
        try:
            import webpush
            
            # L·∫•y th√¥ng tin subscription
            endpoint = subscription.get('endpoint')
            keys = subscription.get('keys', {})
            
            if not endpoint or not keys:
                logger.error("‚ùå Invalid subscription data")
                return False
            
            # T·∫°o payload cho web push
            payload = json.dumps(notification_data)
            
            # G·ª≠i web push notification TH·∫¨T
            webpush.WebPusher(endpoint).send(
                payload,
                vapid_private_key=self.vapid_private_key,
                vapid_claims=self.vapid_claims
            )
            
            logger.info(f"‚úÖ REAL PUSH SENT: {notification_data['title']} to {subscription.get('username', 'unknown')}")
            logger.info(f"üì± Endpoint: {endpoint[:50]}...")
            logger.info(f"üì± Payload: {payload}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error sending REAL web push: {e}")
            # Fallback: g·ª≠i th√¥ng b√°o local n·∫øu web push th·∫•t b·∫°i
            try:
                logger.info(f"üì± FALLBACK LOCAL: {notification_data['title']} - {notification_data['body']}")
                return True
            except:
                return False
    
    async def broadcast_notification(self, notification_data: Dict, user_ids: List[int] = None):
        """G·ª≠i th√¥ng b√°o broadcast ƒë·∫øn nhi·ªÅu user"""
        try:
            if user_ids:
                # G·ª≠i ƒë·∫øn user c·ª• th·ªÉ
                for user_id in user_ids:
                    await self._send_notification_to_user(user_id, notification_data)
            else:
                # G·ª≠i ƒë·∫øn t·∫•t c·∫£ user
                db = SessionLocal()
                users = db.query(User).all()
                db.close()
                
                for user in users:
                    await self._send_notification_to_user(user.id, notification_data)
            
            return True
            
        except Exception as e:
            logger.error(f"Error in broadcast_notification: {e}")
            return False
    
    async def send_notification_to_user(
        self,
        user_id: int,
        title: str,
        body: str
    ):
        """G·ª≠i th√¥ng b√°o ƒë·∫øn user c·ª• th·ªÉ"""
        try:
            logger.info(f"Sending notification to user {user_id}: {title}")
            
            # L·∫•y th√¥ng tin user
            db = SessionLocal()
            try:
                user = db.query(User).filter(User.id == user_id).first()
                if not user:
                    logger.error(f"User {user_id} not found")
                    return False
                
                # G·ª≠i th√¥ng b√°o
                success = await self.send_task_assignment_notification(
                    task_id=0,  # Kh√¥ng c√≥ task_id cho th√¥ng b√°o chung
                    assigned_to_user_id=user_id,
                    task_title=title,
                    task_description=body
                )
                
                return success
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"Error sending notification to user {user_id}: {e}")
            return False

# Global instance
push_service = PushNotificationService()
