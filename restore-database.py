#!/usr/bin/env python3
"""
Script ƒë·ªÉ kh√¥i ph·ª•c database v·ªõi d·ªØ li·ªáu m·∫´u
"""

import sqlite3
import os

def restore_database():
    """Kh√¥i ph·ª•c database v·ªõi d·ªØ li·ªáu m·∫´u"""
    try:
        print("üîß Kh√¥i ph·ª•c database v·ªõi d·ªØ li·ªáu m·∫´u...")
        
        conn = sqlite3.connect('backend/patrol.db')
        cursor = conn.cursor()

        print("1. X√≥a t·∫•t c·∫£ b·∫£ng c≈©...")
        cursor.execute('DROP TABLE IF EXISTS patrol_records')
        cursor.execute('DROP TABLE IF EXISTS patrol_tasks')
        cursor.execute('DROP TABLE IF EXISTS locations')
        cursor.execute('DROP TABLE IF EXISTS user_face_data')
        cursor.execute('DROP TABLE IF EXISTS users')

        print("2. T·∫°o l·∫°i b·∫£ng users...")
        cursor.execute('''
        CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username VARCHAR(50) NOT NULL UNIQUE,
            email VARCHAR(100) NOT NULL UNIQUE,
            password_hash VARCHAR(255) NOT NULL,
            role VARCHAR(20) NOT NULL DEFAULT 'employee',
            full_name VARCHAR(100) NOT NULL,
            phone VARCHAR(20),
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')

        print("3. T·∫°o b·∫£ng user_face_data...")
        cursor.execute('''
        CREATE TABLE user_face_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            face_encoding BLOB NOT NULL,
            face_image_path VARCHAR(255),
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
        ''')

        print("4. T·∫°o b·∫£ng locations...")
        cursor.execute('''
        CREATE TABLE locations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(100) NOT NULL,
            description TEXT,
            qr_code VARCHAR(255),
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')

        print("5. T·∫°o b·∫£ng patrol_tasks...")
        cursor.execute('''
        CREATE TABLE patrol_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title VARCHAR(200) NOT NULL,
            description TEXT,
            location_id INTEGER,
            assigned_to INTEGER,
            status VARCHAR(20) DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (location_id) REFERENCES locations (id),
            FOREIGN KEY (assigned_to) REFERENCES users (id)
        )
        ''')

        print("6. T·∫°o b·∫£ng patrol_records...")
        cursor.execute('''
        CREATE TABLE patrol_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            location_id INTEGER NOT NULL,
            check_in_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            check_out_time TIMESTAMP,
            notes TEXT,
            photo_path VARCHAR(255),
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (location_id) REFERENCES locations (id)
        )
        ''')

        print("7. Th√™m d·ªØ li·ªáu m·∫´u...")
        
        # Users
        users_data = [
            ('admin', 'admin@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.8K2O', 'admin', 'Administrator', None),
            ('manager', 'manager@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.8K2O', 'manager', 'Nguy·ªÖn VƒÉn Qu·∫£n L√Ω', None),
            ('employee1', 'emp1@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.8K2O', 'employee', 'Tr·∫ßn VƒÉn Nh√¢n Vi√™n 1', None),
            ('employee2', 'emp2@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.8K2O', 'employee', 'L√™ VƒÉn Nh√¢n Vi√™n 2', None),
            ('employee3', 'emp3@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.8K2O', 'employee', 'Ph·∫°m VƒÉn Nh√¢n Vi√™n 3', None)
        ]

        cursor.executemany('''
        INSERT INTO users (username, email, password_hash, role, full_name, phone)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', users_data)

        # Locations
        locations_data = [
            ('Khu v·ª±c A', 'M√¥ t·∫£ khu v·ª±c A', 'QR_A_001', True),
            ('Khu v·ª±c B', 'M√¥ t·∫£ khu v·ª±c B', 'QR_B_002', True),
            ('Khu v·ª±c C', 'M√¥ t·∫£ khu v·ª±c C', 'QR_C_003', True),
            ('Khu v·ª±c D', 'M√¥ t·∫£ khu v·ª±c D', 'QR_D_004', True),
            ('Khu v·ª±c E', 'M√¥ t·∫£ khu v·ª±c E', 'QR_E_005', True)
        ]

        cursor.executemany('''
        INSERT INTO locations (name, description, qr_code, is_active)
        VALUES (?, ?, ?, ?)
        ''', locations_data)

        # Th√™m m·ªôt s·ªë patrol_records m·∫´u v·ªõi ·∫£nh
        print("8. Th√™m patrol_records m·∫´u v·ªõi ·∫£nh...")
        checkin_photos_dir = '/Users/maybe/Documents/shopee/checkin_photos/'
        if os.path.exists(checkin_photos_dir):
            checkin_photos = os.listdir(checkin_photos_dir)
            if checkin_photos:
                # L·∫•y 10 ·∫£nh ƒë·∫ßu ti√™n ƒë·ªÉ t·∫°o records m·∫´u
                sample_photos = checkin_photos[:10]
                for i, photo in enumerate(sample_photos):
                    if photo.endswith('.jpg'):
                        cursor.execute('''
                        INSERT INTO patrol_records (user_id, location_id, check_in_time, photo_path)
                        VALUES (?, ?, datetime('now', '-{} days'), ?)
                        '''.format(i), (1, (i % 5) + 1, f'checkin_photos/{photo}'))

        conn.commit()
        conn.close()

        print("üéâ HO√ÄN T·∫§T! Database ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c!")
        print("‚úÖ ·∫¢nh checkin ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c!")
        print("‚úÖ B√°o c√°o v√† admin dashboard s·∫Ω hi·ªÉn th·ªã ·∫£nh l·∫°i!")
        print("‚úÖ Face auth ƒë√£ ƒë∆∞·ª£c reset s·∫°ch!")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    restore_database()
