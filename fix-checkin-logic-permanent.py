#!/usr/bin/env python3
"""
Script s·ª≠a h·∫≥n logic ch·∫•m c√¥ng ƒë·ªÉ sau n√†y t·∫°o nhi·ªám v·ª• m·ªõi kh√¥ng g·∫∑p v·∫•n ƒë·ªÅ
"""

import sqlite3
from datetime import datetime

def fix_checkin_logic_permanently():
    conn = sqlite3.connect('backend/app.db')
    cursor = conn.cursor()
    
    print("üîß S·ª¨A H·∫≤N LOGIC CH·∫§M C√îNG ƒê·ªÇ TR√ÅNH V·∫§N ƒê·ªÄ SAU N√ÄY")
    print("=" * 60)
    
    # 1. Ki·ªÉm tra v√† s·ª≠a t·∫•t c·∫£ tasks c√≥ nhi·ªÅu stops v·ªõi c√πng location_id
    print("\n1. üîç Ki·ªÉm tra tasks c√≥ v·∫•n ƒë·ªÅ:")
    cursor.execute("""
        SELECT task_id, location_id, COUNT(*) as stop_count
        FROM patrol_task_stops 
        GROUP BY task_id, location_id
        HAVING COUNT(*) > 1
        ORDER BY task_id, location_id
    """)
    
    problematic_tasks = cursor.fetchall()
    
    if problematic_tasks:
        print(f"   ‚ùå T√¨m th·∫•y {len(problematic_tasks)} tasks c√≥ v·∫•n ƒë·ªÅ:")
        for task_id, location_id, count in problematic_tasks:
            print(f"      Task {task_id}, Location {location_id}: {count} stops")
    else:
        print("   ‚úÖ Kh√¥ng c√≥ tasks n√†o c√≥ v·∫•n ƒë·ªÅ")
    
    # 2. S·ª≠a logic ƒë·ªìng b·ªô d·ªØ li·ªáu
    print("\n2. üîß S·ª≠a logic ƒë·ªìng b·ªô d·ªØ li·ªáu:")
    
    # L·∫•y t·∫•t c·∫£ patrol task stops
    cursor.execute("""
        SELECT pts.id, pts.task_id, pts.location_id, pts.sequence, pts.scheduled_time, pts.completed
        FROM patrol_task_stops pts
        WHERE pts.scheduled_time IS NOT NULL AND pts.scheduled_time != 'Ch∆∞a x√°c ƒë·ªãnh'
        ORDER BY pts.task_id, pts.sequence
    """)
    stops = cursor.fetchall()
    
    print(f"   üìã Ki·ªÉm tra {len(stops)} stops...")
    
    for stop_id, task_id, location_id, sequence, scheduled_time, current_completed in stops:
        print(f"\n   üîç Stop {stop_id}: Task {task_id}, Location {location_id}, Sequence {sequence}, Time {scheduled_time}")
        
        # Reset completed status
        cursor.execute("UPDATE patrol_task_stops SET completed = 0, completed_at = NULL WHERE id = ?", (stop_id,))
        
        # T√¨m checkin records cho stop n√†y (ch·ªâ v·ªõi location_id c·ª• th·ªÉ)
        cursor.execute("""
            SELECT id, check_in_time
            FROM patrol_records
            WHERE task_id = ? AND location_id = ?
            ORDER BY check_in_time DESC
        """, (task_id, location_id))
        
        checkin_records = cursor.fetchall()
        
        if not checkin_records:
            print(f"      ‚ö™ Kh√¥ng c√≥ checkin record")
            continue
        
        # Ki·ªÉm tra t·ª´ng checkin record
        for record_id, checkin_time_str in checkin_records:
            try:
                checkin_time = datetime.fromisoformat(checkin_time_str.replace('Z', '+00:00'))
                checkin_hour = checkin_time.hour
                checkin_minute = checkin_time.minute
                checkin_time_in_minutes = checkin_hour * 60 + checkin_minute
                
                # Parse scheduled time
                scheduled_hour, scheduled_minute = map(int, scheduled_time.split(':'))
                scheduled_time_in_minutes = scheduled_hour * 60 + scheduled_minute
                
                # Logic m·ªõi: ch·ªâ cho ph√©p ch·∫•m c√¥ng t·ª´ gi·ªù quy ƒë·ªãnh + 15 ph√∫t
                time_window = 15
                is_within_window = (
                    checkin_time_in_minutes >= scheduled_time_in_minutes and
                    checkin_time_in_minutes <= (scheduled_time_in_minutes + time_window)
                )
                
                if is_within_window:
                    print(f"      ‚úÖ Record {record_id}: Checkin {checkin_hour:02d}:{checkin_minute:02d} h·ª£p l·ªá cho Stop {sequence} ({scheduled_time})")
                    cursor.execute("""
                        UPDATE patrol_task_stops 
                        SET completed = 1, completed_at = ?
                        WHERE id = ?
                    """, (checkin_time_str, stop_id))
                    break
                else:
                    if checkin_time_in_minutes < scheduled_time_in_minutes:
                        print(f"      ‚è∞ Record {record_id}: Checkin {checkin_hour:02d}:{checkin_minute:02d} qu√° s·ªõm cho Stop {sequence} ({scheduled_time})")
                    else:
                        print(f"      ‚è∞ Record {record_id}: Checkin {checkin_hour:02d}:{checkin_minute:02d} qu√° mu·ªôn cho Stop {sequence} ({scheduled_time})")
                    
            except Exception as e:
                print(f"      ‚ùå L·ªói x·ª≠ l√Ω record {record_id}: {e}")
    
    # 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i task
    print(f"\n3. üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i task...")
    
    cursor.execute("""
        SELECT DISTINCT task_id
        FROM patrol_task_stops
        WHERE completed = 1
    """)
    completed_tasks = cursor.fetchall()
    
    for (task_id,) in completed_tasks:
        # Ki·ªÉm tra xem t·∫•t c·∫£ stops c·ªßa task ƒë√£ ho√†n th√†nh ch∆∞a
        cursor.execute("""
            SELECT COUNT(*) as total, SUM(CASE WHEN completed = 1 THEN 1 ELSE 0 END) as completed_count
            FROM patrol_task_stops
            WHERE task_id = ?
        """, (task_id,))
        
        total, completed_count = cursor.fetchone()
        
        if completed_count == total and total > 0:
            cursor.execute("UPDATE patrol_tasks SET status = 'completed' WHERE id = ?", (task_id,))
            print(f"   ‚úÖ Task {task_id}: T·∫•t c·∫£ {total} stops ƒë√£ ho√†n th√†nh ‚Üí status = 'completed'")
        else:
            cursor.execute("UPDATE patrol_tasks SET status = 'in_progress' WHERE id = ?", (task_id,))
            print(f"   üîÑ Task {task_id}: {completed_count}/{total} stops ho√†n th√†nh ‚Üí status = 'in_progress'")
    
    # 4. T·∫°o script t·ª± ƒë·ªông cho t∆∞∆°ng lai
    print(f"\n4. üìù T·∫°o script t·ª± ƒë·ªông cho t∆∞∆°ng lai...")
    
    script_content = '''#!/usr/bin/env python3
"""
Script t·ª± ƒë·ªông ƒë·ªìng b·ªô d·ªØ li·ªáu checkin theo logic ƒë√∫ng gi·ªù
Ch·∫°y script n√†y sau khi t·∫°o nhi·ªám v·ª• m·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o logic ch√≠nh x√°c
"""

import sqlite3
from datetime import datetime

def sync_checkin_data_by_time():
    conn = sqlite3.connect('backend/app.db')
    cursor = conn.cursor()
    
    print("üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu checkin theo logic ƒë√∫ng gi·ªù...")
    
    # L·∫•y t·∫•t c·∫£ patrol task stops
    cursor.execute("""
        SELECT pts.id, pts.task_id, pts.location_id, pts.sequence, pts.scheduled_time, pts.completed
        FROM patrol_task_stops pts
        WHERE pts.scheduled_time IS NOT NULL AND pts.scheduled_time != 'Ch∆∞a x√°c ƒë·ªãnh'
        ORDER BY pts.task_id, pts.sequence
    """)
    stops = cursor.fetchall()
    
    print(f"üìã T√¨m th·∫•y {len(stops)} stops c·∫ßn ki·ªÉm tra")
    
    for stop_id, task_id, location_id, sequence, scheduled_time, current_completed in stops:
        print(f"\\nüîç Ki·ªÉm tra Stop {stop_id}: Task {task_id}, Location {location_id}, Sequence {sequence}, Time {scheduled_time}")
        
        # Reset completed status
        cursor.execute("UPDATE patrol_task_stops SET completed = 0, completed_at = NULL WHERE id = ?", (stop_id,))
        
        # T√¨m checkin records cho stop n√†y
        cursor.execute("""
            SELECT id, check_in_time
            FROM patrol_records
            WHERE task_id = ? AND location_id = ?
            ORDER BY check_in_time DESC
        """, (task_id, location_id))
        
        checkin_records = cursor.fetchall()
        
        if not checkin_records:
            print(f"   ‚ö™ Kh√¥ng c√≥ checkin record")
            continue
        
        # Ki·ªÉm tra t·ª´ng checkin record
        for record_id, checkin_time_str in checkin_records:
            try:
                checkin_time = datetime.fromisoformat(checkin_time_str.replace('Z', '+00:00'))
                checkin_hour = checkin_time.hour
                checkin_minute = checkin_time.minute
                checkin_time_in_minutes = checkin_hour * 60 + checkin_minute
                
                # Parse scheduled time
                scheduled_hour, scheduled_minute = map(int, scheduled_time.split(':'))
                scheduled_time_in_minutes = scheduled_hour * 60 + scheduled_minute
                
                # Ki·ªÉm tra c√≥ trong kho·∫£ng th·ªùi gian h·ª£p l·ªá kh√¥ng (t·ª´ gi·ªù quy ƒë·ªãnh + 15 ph√∫t)
                time_window = 15
                is_within_window = (
                    checkin_time_in_minutes >= scheduled_time_in_minutes and
                    checkin_time_in_minutes <= (scheduled_time_in_minutes + time_window)
                )
                
                if is_within_window:
                    print(f"   ‚úÖ Record {record_id}: Checkin {checkin_hour:02d}:{checkin_minute:02d} trong kho·∫£ng th·ªùi gian h·ª£p l·ªá cho Stop {sequence} ({scheduled_time})")
                    cursor.execute("""
                        UPDATE patrol_task_stops 
                        SET completed = 1, completed_at = ?
                        WHERE id = ?
                    """, (checkin_time_str, stop_id))
                    break
                else:
                    # Ki·ªÉm tra xem c√≥ ph·∫£i ch·∫•m c√¥ng s·ªõm kh√¥ng
                    if checkin_time_in_minutes < scheduled_time_in_minutes:
                        print(f"   ‚è∞ Record {record_id}: Checkin {checkin_hour:02d}:{checkin_minute:02d} qu√° s·ªõm cho Stop {sequence} ({scheduled_time})")
                    elif checkin_time_in_minutes > (scheduled_time_in_minutes + time_window):
                        print(f"   ‚è∞ Record {record_id}: Checkin {checkin_hour:02d}:{checkin_minute:02d} qu√° mu·ªôn cho Stop {sequence} ({scheduled_time})")
                    else:
                        print(f"   ‚ö†Ô∏è  Record {record_id}: Checkin {checkin_hour:02d}:{checkin_minute:02d} ngo√†i kho·∫£ng th·ªùi gian h·ª£p l·ªá cho Stop {sequence} ({scheduled_time})")
                    
            except Exception as e:
                print(f"   ‚ùå L·ªói x·ª≠ l√Ω record {record_id}: {e}")
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i task d·ª±a tr√™n stops
    print(f"\\nüîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i task...")
    
    cursor.execute("""
        SELECT DISTINCT task_id
        FROM patrol_task_stops
        WHERE completed = 1
    """)
    completed_tasks = cursor.fetchall()
    
    for (task_id,) in completed_tasks:
        # Ki·ªÉm tra xem t·∫•t c·∫£ stops c·ªßa task ƒë√£ ho√†n th√†nh ch∆∞a
        cursor.execute("""
            SELECT COUNT(*) as total, SUM(CASE WHEN completed = 1 THEN 1 ELSE 0 END) as completed_count
            FROM patrol_task_stops
            WHERE task_id = ?
        """, (task_id,))
        
        total, completed_count = cursor.fetchone()
        
        if completed_count == total and total > 0:
            cursor.execute("UPDATE patrol_tasks SET status = 'completed' WHERE id = ?", (task_id,))
            print(f"   ‚úÖ Task {task_id}: T·∫•t c·∫£ {total} stops ƒë√£ ho√†n th√†nh ‚Üí status = 'completed'")
        else:
            cursor.execute("UPDATE patrol_tasks SET status = 'in_progress' WHERE id = ?", (task_id,))
            print(f"   üîÑ Task {task_id}: {completed_count}/{total} stops ho√†n th√†nh ‚Üí status = 'in_progress'")
    
    conn.commit()
    print("\\n‚úÖ Ho√†n th√†nh ƒë·ªìng b·ªô d·ªØ li·ªáu theo logic ƒë√∫ng gi·ªù!")
    conn.close()

if __name__ == "__main__":
    sync_checkin_data_by_time()
'''
    
    with open('sync-checkin-by-time-permanent.py', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("   ‚úÖ T·∫°o file sync-checkin-by-time-permanent.py")
    
    conn.commit()
    print("\n‚úÖ Ho√†n th√†nh s·ª≠a h·∫≥n logic ch·∫•m c√¥ng!")
    conn.close()

if __name__ == "__main__":
    fix_checkin_logic_permanently()
