#!/bin/bash

# Script s·ª≠a API ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi database c≈©
echo "üîß S·ª¨A API T∆Ø∆†NG TH√çCH V·ªöI DATABASE C≈®"
echo "======================================"

# Backup file c≈©
cp backend/app/routes/checkin.py backend/app/routes/checkin.py.backup

# T·∫°o API m·ªõi ƒë∆°n gi·∫£n
cat > backend/app/routes/checkin_simple.py << 'EOF'
from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File, Form, Request
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime, timezone, timedelta
import os
from ..database import get_db
from ..auth import get_current_user
from ..models import User, Location, PatrolRecord, PatrolTask, TaskStatus
from ..config import settings

router = APIRouter(prefix="/checkin", tags=["checkin"])

def get_vietnam_time() -> datetime:
    return datetime.now(timezone(timedelta(hours=7)))

@router.get("/admin/all-records")
async def get_all_checkin_records_admin(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y t·∫•t c·∫£ checkin records cho admin dashboard - T∆∞∆°ng th√≠ch database c≈©"""
    try:
        # Ki·ªÉm tra quy·ªÅn admin/manager
        if current_user.role not in ["admin", "manager"]:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"
            )
        
        # L·∫•y t·∫•t c·∫£ patrol records v·ªõi th√¥ng tin li√™n quan
        from sqlalchemy.orm import joinedload
        records = db.query(PatrolRecord).options(
            joinedload(PatrolRecord.user),
            joinedload(PatrolRecord.location)
        ).order_by(PatrolRecord.check_in_time.desc()).limit(100).all()
        
        result = []
        for record in records:
            # T∆∞∆°ng th√≠ch v·ªõi schema c≈© v√† m·ªõi
            photo_url = getattr(record, 'photo_url', None) or getattr(record, 'photo_path', None)
            task_id = getattr(record, 'task_id', None)
            task_title = "Nhi·ªám v·ª• c≈©" if not task_id else "Unknown Task"
            
            result.append({
                "id": record.id,
                "user_id": record.user_id,
                "user_name": record.user.username if record.user else "Unknown",
                "task_id": task_id,
                "task_title": task_title,
                "location_id": record.location_id,
                "location_name": record.location.name if record.location else "Unknown Location",
                "check_in_time": record.check_in_time.isoformat() if record.check_in_time else None,
                "check_out_time": record.check_out_time.isoformat() if record.check_out_time else None,
                "photo_url": photo_url,
                "notes": record.notes,
                "created_at": getattr(record, 'created_at', record.check_in_time).isoformat() if getattr(record, 'created_at', record.check_in_time) else None,
            })
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error in get_all_checkin_records_admin: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói server: {str(e)}"
        )

@router.post("/test-auth")
async def test_auth(
    current_user: User = Depends(get_current_user)
):
    """Test authentication endpoint"""
    return {
        "message": "Authentication successful",
        "user": current_user.username,
        "user_id": current_user.id,
        "role": current_user.role
    }
EOF

# Thay th·∫ø file c≈©
mv backend/app/routes/checkin_simple.py backend/app/routes/checkin.py

echo "‚úÖ ƒê√£ s·ª≠a API t∆∞∆°ng th√≠ch v·ªõi database c≈©!"
echo "üìã Thay ƒë·ªïi ch√≠nh:"
echo "   - Lo·∫°i b·ªè c√°c field kh√¥ng t·ªìn t·∫°i trong database c≈©"
echo "   - Ch·ªâ s·ª≠ d·ª•ng photo_url (kh√¥ng c√≥ photo_path)"
echo "   - X·ª≠ l√Ω task_id nullable"
echo ""
echo "üîÑ C·∫ßn restart backend ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi"
