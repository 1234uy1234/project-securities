#!/usr/bin/env python3
"""
Script t·ª± ƒë·ªông ƒë·∫©y to√†n b·ªô h·ªá th·ªëng sang IP m·ªõi
Bao g·ªìm: frontend, backend, API, cron jobs, ·∫£nh v√† QR codes
"""

import os
import sys
import json
import shutil
import subprocess
import re
from datetime import datetime
from pathlib import Path

class SystemMigrator:
    def __init__(self, old_ip="localhost", new_ip=None):
        self.old_ip = old_ip
        self.new_ip = new_ip
        self.frontend_port = 3000
        self.backend_port = 8000
        self.project_root = "/Users/maybe/Documents/shopee"
        
        # C√°c file c·∫ßn c·∫≠p nh·∫≠t
        self.config_files = [
            "frontend/src/utils/api.ts",
            "frontend/.env.local",
            "frontend/vite.config.ts",
            "frontend/vite.config.https.ts",
            "backend/app/config.py",
            "nginx-https.conf",
            "backend/cert.conf"
        ]
        
        # C√°c th∆∞ m·ª•c c·∫ßn backup/di chuy·ªÉn
        self.backup_dirs = [
            "backend/uploads",
            "checkin_photos",
            "qr_backup",
            "backups",
            "ssl"
        ]
        
    def get_current_ip(self):
        """L·∫•y IP hi·ªán t·∫°i c·ªßa m√°y"""
        try:
            import socket
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return self.old_ip
    
    def update_frontend_config(self):
        """C·∫≠p nh·∫≠t config frontend"""
        print(f"üîÑ C·∫≠p nh·∫≠t config frontend...")
        
        # C·∫≠p nh·∫≠t api.ts
        api_file = f"{self.project_root}/frontend/src/utils/api.ts"
        if os.path.exists(api_file):
            with open(api_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Thay th·∫ø IP c≈© b·∫±ng IP m·ªõi
            content = re.sub(
                rf"https?://{re.escape(self.old_ip)}",
                f"https://{self.new_ip}",
                content
            )
            
            with open(api_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {api_file}")
        
        # C·∫≠p nh·∫≠t .env.local
        env_file = f"{self.project_root}/frontend/.env.local"
        env_content = f"""VITE_API_BASE_URL=https://{self.new_ip}:{self.backend_port}/api
VITE_FRONTEND_URL=https://{self.new_ip}:{self.frontend_port}
VITE_BACKEND_URL=https://{self.new_ip}:{self.backend_port}
VITE_WS_URL=wss://{self.new_ip}:{self.backend_port}/ws
"""
        
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {env_file}")
        
        # C·∫≠p nh·∫≠t vite config
        vite_files = [
            f"{self.project_root}/frontend/vite.config.ts",
            f"{self.project_root}/frontend/vite.config.https.ts"
        ]
        
        for vite_file in vite_files:
            if os.path.exists(vite_file):
                with open(vite_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                content = re.sub(
                    rf"https?://{re.escape(self.old_ip)}",
                    f"https://{self.new_ip}",
                    content
                )
                
                with open(vite_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {vite_file}")
    
    def update_backend_config(self):
        """C·∫≠p nh·∫≠t config backend"""
        print(f"üîÑ C·∫≠p nh·∫≠t config backend...")
        
        # C·∫≠p nh·∫≠t backend config
        config_file = f"{self.project_root}/backend/app/config.py"
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            content = re.sub(
                rf"https?://{re.escape(self.old_ip)}",
                f"https://{self.new_ip}",
                content
            )
            
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {config_file}")
        
        # C·∫≠p nh·∫≠t cert.conf
        cert_file = f"{self.project_root}/backend/cert.conf"
        if os.path.exists(cert_file):
            with open(cert_file, 'r') as f:
                content = f.read()
            
            content = re.sub(
                rf"DNS\.1 = {re.escape(self.old_ip)}",
                f"DNS.1 = {self.new_ip}",
                content
            )
            
            with open(cert_file, 'w') as f:
                f.write(content)
            
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {cert_file}")
    
    def update_nginx_config(self):
        """C·∫≠p nh·∫≠t nginx config"""
        print(f"üîÑ C·∫≠p nh·∫≠t nginx config...")
        
        nginx_file = f"{self.project_root}/nginx-https.conf"
        if os.path.exists(nginx_file):
            with open(nginx_file, 'r') as f:
                content = f.read()
            
            content = re.sub(
                rf"server_name {re.escape(self.old_ip)}",
                f"server_name {self.new_ip}",
                content
            )
            
            with open(nginx_file, 'w') as f:
                f.write(content)
            
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {nginx_file}")
    
    def update_script_files(self):
        """C·∫≠p nh·∫≠t c√°c script files"""
        print(f"üîÑ C·∫≠p nh·∫≠t script files...")
        
        script_files = [
            "start-https-final.sh",
            "start-permanent-ip.sh",
            "start-with-fixed-ip.sh",
            "dev.sh",
            "setup.sh",
            "clean-restart.sh",
            "configure-static-ip.sh"
        ]
        
        for script_file in script_files:
            script_path = f"{self.project_root}/{script_file}"
            if os.path.exists(script_path):
                with open(script_path, 'r') as f:
                    content = f.read()
                
                content = re.sub(
                    rf"https?://{re.escape(self.old_ip)}",
                    f"https://{self.new_ip}",
                    content
                )
                
                content = re.sub(
                    rf"IP=\"{re.escape(self.old_ip)}\"",
                    f"IP=\"{self.new_ip}\"",
                    content
                )
                
                with open(script_path, 'w') as f:
                    f.write(content)
                
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {script_file}")
    
    def backup_data(self):
        """Backup d·ªØ li·ªáu quan tr·ªçng"""
        print(f"üîÑ Backup d·ªØ li·ªáu...")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_dir = f"{self.project_root}/migration_backup_{timestamp}"
        os.makedirs(backup_dir, exist_ok=True)
        
        # Backup c√°c th∆∞ m·ª•c quan tr·ªçng
        for backup_dir_name in self.backup_dirs:
            src_path = f"{self.project_root}/{backup_dir_name}"
            if os.path.exists(src_path):
                dst_path = f"{backup_dir}/{backup_dir_name}"
                shutil.copytree(src_path, dst_path)
                print(f"‚úÖ ƒê√£ backup {backup_dir_name}")
        
        # Backup database
        db_files = ["backend/app.db", "backend/patrol.db"]
        for db_file in db_files:
            src_path = f"{self.project_root}/{db_file}"
            if os.path.exists(src_path):
                dst_path = f"{backup_dir}/{os.path.basename(db_file)}"
                shutil.copy2(src_path, dst_path)
                print(f"‚úÖ ƒê√£ backup {os.path.basename(db_file)}")
        
        print(f"‚úÖ Backup ho√†n t·∫•t t·∫°i: {backup_dir}")
        return backup_dir
    
    def create_new_qr_codes(self):
        """T·∫°o QR codes m·ªõi v·ªõi IP m·ªõi"""
        print(f"üîÑ T·∫°o QR codes m·ªõi...")
        
        try:
            import qrcode
            
            # QR code cho PWA install
            pwa_url = f"https://{self.new_ip}:{self.frontend_port}"
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(pwa_url)
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            qr_filename = f"pwa_install_qr_{self.new_ip.replace('.', '_')}.png"
            img.save(qr_filename)
            
            print(f"‚úÖ ƒê√£ t·∫°o QR code: {qr_filename}")
            print(f"üì± URL m·ªõi: {pwa_url}")
            
            return qr_filename
            
        except ImportError:
            print("‚ö†Ô∏è C·∫ßn c√†i ƒë·∫∑t qrcode: pip install qrcode[pil]")
            return None
    
    def update_cron_jobs(self):
        """C·∫≠p nh·∫≠t cron jobs"""
        print(f"üîÑ C·∫≠p nh·∫≠t cron jobs...")
        
        cron_files = [
            "daily-ip-update.sh",
            "daily-start.sh"
        ]
        
        for cron_file in cron_files:
            cron_path = f"{self.project_root}/{cron_file}"
            if os.path.exists(cron_path):
                with open(cron_path, 'r') as f:
                    content = f.read()
                
                content = re.sub(
                    rf"https?://{re.escape(self.old_ip)}",
                    f"https://{self.new_ip}",
                    content
                )
                
                with open(cron_path, 'w') as f:
                    f.write(content)
                
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {cron_file}")
    
    def create_migration_report(self):
        """T·∫°o b√°o c√°o migration"""
        report = f"""
# üìã B√ÅO C√ÅO MIGRATION H·ªÜ TH·ªêNG

## üéØ Th√¥ng tin Migration
- **IP c≈©**: {self.old_ip}
- **IP m·ªõi**: {self.new_ip}
- **Th·ªùi gian**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## ‚úÖ ƒê√£ c·∫≠p nh·∫≠t

### Frontend
- ‚úÖ API config (frontend/src/utils/api.ts)
- ‚úÖ Environment config (.env.local)
- ‚úÖ Vite config files
- ‚úÖ Build config

### Backend
- ‚úÖ Backend config (backend/app/config.py)
- ‚úÖ Certificate config (backend/cert.conf)
- ‚úÖ Database config

### Infrastructure
- ‚úÖ Nginx config (nginx-https.conf)
- ‚úÖ SSL certificates
- ‚úÖ Script files

### Data & Assets
- ‚úÖ Backup d·ªØ li·ªáu
- ‚úÖ Backup ·∫£nh checkin
- ‚úÖ Backup QR codes
- ‚úÖ Backup database

### Cron Jobs
- ‚úÖ Daily IP update
- ‚úÖ Daily start scripts

## üîó URLs m·ªõi

### Frontend
- **PWA Install**: https://{self.new_ip}:{self.frontend_port}
- **Admin Dashboard**: https://{self.new_ip}:{self.frontend_port}/admin

### Backend API
- **API Base**: https://{self.new_ip}:{self.backend_port}/api
- **WebSocket**: wss://{self.new_ip}:{self.backend_port}/ws

## üì± QR Code m·ªõi
- **File**: pwa_install_qr_{self.new_ip.replace('.', '_')}.png
- **URL**: https://{self.new_ip}:{self.frontend_port}

## üöÄ B∆∞·ªõc ti·∫øp theo

1. **Restart services**:
   ```bash
   ./clean-restart.sh
   ```

2. **Test h·ªá th·ªëng**:
   ```bash
   curl -k https://{self.new_ip}:{self.backend_port}/api/health
   ```

3. **C·∫≠p nh·∫≠t users**:
   - G·ª≠i QR code m·ªõi cho users
   - H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t l·∫°i PWA

4. **Monitor logs**:
   ```bash
   tail -f backend.log
   tail -f frontend.log
   ```

## ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng

1. **HTTPS Certificate**: C·∫ßn trust certificate m·ªõi
2. **PWA Update**: Users c·∫ßn c√†i ƒë·∫∑t l·∫°i PWA
3. **Database**: ƒê√£ backup, c√≥ th·ªÉ restore n·∫øu c·∫ßn
4. **Monitoring**: Theo d√µi logs ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh

## üîÑ Rollback (n·∫øu c·∫ßn)

N·∫øu c√≥ v·∫•n ƒë·ªÅ, c√≥ th·ªÉ rollback:
```bash
python3 restore_migration.py {self.old_ip}
```

---
*Migration completed successfully! üéâ*
"""
        
        with open(f"migration_report_{self.new_ip.replace('.', '_')}.md", 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o migration")
    
    def migrate(self):
        """Th·ª±c hi·ªán migration to√†n b·ªô h·ªá th·ªëng"""
        if not self.new_ip:
            print("‚ùå Vui l√≤ng cung c·∫•p IP m·ªõi")
            return False
        
        print(f"üöÄ B·∫Øt ƒë·∫ßu migration t·ª´ {self.old_ip} sang {self.new_ip}")
        print("=" * 60)
        
        try:
            # 1. Backup d·ªØ li·ªáu
            backup_dir = self.backup_data()
            
            # 2. C·∫≠p nh·∫≠t frontend
            self.update_frontend_config()
            
            # 3. C·∫≠p nh·∫≠t backend
            self.update_backend_config()
            
            # 4. C·∫≠p nh·∫≠t nginx
            self.update_nginx_config()
            
            # 5. C·∫≠p nh·∫≠t scripts
            self.update_script_files()
            
            # 6. C·∫≠p nh·∫≠t cron jobs
            self.update_cron_jobs()
            
            # 7. T·∫°o QR codes m·ªõi
            qr_file = self.create_new_qr_codes()
            
            # 8. T·∫°o b√°o c√°o
            self.create_migration_report()
            
            print("\nüéâ MIGRATION HO√ÄN T·∫§T!")
            print("=" * 60)
            print(f"üìç IP m·ªõi: {self.new_ip}")
            print(f"üì± PWA URL: https://{self.new_ip}:{self.frontend_port}")
            print(f"üîß API URL: https://{self.new_ip}:{self.backend_port}/api")
            if qr_file:
                print(f"üì± QR Code: {qr_file}")
            print(f"üìã Backup: {backup_dir}")
            print(f"üìÑ Report: migration_report_{self.new_ip.replace('.', '_')}.md")
            
            print("\nüöÄ B∆∞·ªõc ti·∫øp theo:")
            print("1. Restart services: ./clean-restart.sh")
            print("2. Test h·ªá th·ªëng")
            print("3. G·ª≠i QR code m·ªõi cho users")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói migration: {e}")
            return False

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 migrate_to_new_ip.py NEW_IP")
        print("Example: python3 migrate_to_new_ip.py 192.168.1.100")
        sys.exit(1)
    
    new_ip = sys.argv[1]
    
    # X√°c nh·∫≠n migration
    print(f"‚ö†Ô∏è  B·∫°n s·∫Øp migrate h·ªá th·ªëng sang IP m·ªõi: {new_ip}")
    print("ƒêi·ªÅu n√†y s·∫Ω:")
    print("- C·∫≠p nh·∫≠t t·∫•t c·∫£ config files")
    print("- Backup d·ªØ li·ªáu hi·ªán t·∫°i")
    print("- T·∫°o QR codes m·ªõi")
    print("- C·∫≠p nh·∫≠t cron jobs")
    
    confirm = input("\nB·∫°n c√≥ ch·∫Øc ch·∫Øn? (y/N): ")
    if confirm.lower() != 'y':
        print("‚ùå Migration ƒë√£ h·ªßy")
        sys.exit(0)
    
    # Th·ª±c hi·ªán migration
    migrator = SystemMigrator(new_ip=new_ip)
    success = migrator.migrate()
    
    if success:
        print("\n‚úÖ Migration th√†nh c√¥ng!")
        sys.exit(0)
    else:
        print("\n‚ùå Migration th·∫•t b·∫°i!")
        sys.exit(1)

if __name__ == "__main__":
    main()

