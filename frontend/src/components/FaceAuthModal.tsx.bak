import React, { useRef, useState, useCallback } from 'react';
import { X, Camera, CheckCircle, AlertCircle, User } from 'lucide-react';
import { useAuthStore } from '../stores/authStore';
import cameraManager, { CAMERA_TYPES, CAMERA_CONSTRAINTS } from '../utils/cameraManager';

interface FaceAuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: (userData: any) => void;
  mode: 'register' | 'verify';
  onRegisterSuccess?: () => void;
}

const FaceAuthModal: React.FC<FaceAuthModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
  mode,
  onRegisterSuccess
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [isCapturing, setIsCapturing] = useState(false);

  const startCamera = useCallback(async () => {
    try {
      setError(null);
      console.log('üé• Starting face auth camera...');
      
      // S·ª≠ d·ª•ng CameraManager ƒë·ªÉ tr√°nh xung ƒë·ªôt
      const mediaStream = await cameraManager.getStream(
        CAMERA_TYPES.FACE_AUTH,
        CAMERA_CONSTRAINTS[CAMERA_TYPES.FACE_AUTH]
      );
      
      console.log('‚úÖ Camera stream obtained via CameraManager');
      setStream(mediaStream);
      
      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream;
        
        // ƒê·∫£m b·∫£o video load xong v√† play m∆∞·ª£t
        videoRef.current.onloadedmetadata = () => {
          if (videoRef.current) {
            videoRef.current.play().then(() => {
              console.log('‚úÖ Face auth camera ready');
            }).catch((playError) => {
              console.error('‚ùå Video play error:', playError);
              setError('L·ªói ph√°t video. Vui l√≤ng th·ª≠ l·∫°i.');
            });
          }
        };
        
        // Th√™m event listener ƒë·ªÉ x·ª≠ l√Ω l·ªói
        videoRef.current.onerror = (e) => {
          console.error('‚ùå Video error:', e);
          setError('L·ªói hi·ªÉn th·ªã video. Vui l√≤ng th·ª≠ l·∫°i.');
        };
      }
    } catch (err: any) {
      console.error('‚ùå Camera error:', err);
      
      let errorMessage = 'Kh√¥ng th·ªÉ truy c·∫≠p camera. ';
      if (err.name === 'NotAllowedError') {
        errorMessage += 'Quy·ªÅn truy c·∫≠p camera b·ªã t·ª´ ch·ªëi. Vui l√≤ng cho ph√©p truy c·∫≠p camera.';
      } else if (err.name === 'NotFoundError') {
        errorMessage += 'Kh√¥ng t√¨m th·∫•y camera n√†o tr√™n thi·∫øt b·ªã.';
      } else if (err.name === 'NotReadableError') {
        errorMessage += 'Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.';
      } else {
        errorMessage += err.message || 'Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p camera.';
      }
      
      setError(errorMessage);
    }
  }, []);

  const stopCamera = useCallback(async () => {
    try {
      await cameraManager.stopStream(CAMERA_TYPES.FACE_AUTH);
      setStream(null);
      console.log('‚úÖ Face auth camera stopped via CameraManager');
    } catch (error) {
      console.error('‚ùå Error stopping camera:', error);
    }
  }, []);

  const capturePhoto = useCallback(() => {
    if (!videoRef.current || !canvasRef.current || isCapturing) return;

    setIsCapturing(true);
    
    try {
      const video = videoRef.current;
      const canvas = canvasRef.current;
      const context = canvas.getContext('2d');

      if (!context) {
        console.error('‚ùå Canvas context not available');
        setIsCapturing(false);
        return;
      }

      // Ki·ªÉm tra video c√≥ s·∫µn s√†ng kh√¥ng
      if (video.videoWidth === 0 || video.videoHeight === 0) {
        console.error('‚ùå Video not ready - dimensions are 0');
        setIsCapturing(false);
        return;
      }

      // Set canvas size to match video
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      // Draw video frame to canvas
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      // Convert to base64 v·ªõi quality t·ªët h∆°n
      const base64 = canvas.toDataURL('image/jpeg', 0.9);
      
      // Debug: Log image info
      console.log('üì∏ Captured image info:');
      console.log('- Video dimensions:', video.videoWidth, 'x', video.videoHeight);
      console.log('- Canvas dimensions:', canvas.width, 'x', canvas.height);
      console.log('- Size:', base64.length, 'characters');
      console.log('- Format:', base64.split(',')[0]);
      console.log('- Data length:', base64.split(',')[1] ? base64.split(',')[1].length : 'N/A');
      
      // Check if image is valid
      if (!base64.startsWith('data:image/')) {
        console.error('‚ùå Invalid image format:', base64.substring(0, 50));
        setIsCapturing(false);
        return;
      }
      
      const base64Data = base64.split(',')[1];
      if (!base64Data) {
        console.error('‚ùå No base64 data found');
        setIsCapturing(false);
        return;
      }
      
      // Check base64 padding
      const padding = base64Data.length % 4;
      if (padding !== 0) {
        console.error('‚ùå Base64 padding error:', padding);
        setIsCapturing(false);
        return;
      }
      
      console.log('‚úÖ Image format OK');
      setIsCapturing(false);
      return base64;
    } catch (error) {
      console.error('‚ùå Error capturing photo:', error);
      setIsCapturing(false);
      return;
    }
  }, [isCapturing]); // Add isCapturing to dependencies

  const processFaceAuth = async (imageData: string) => {
    setIsProcessing(true);
    setError(null);
    setSuccess(null);

    try {
      // Validate image data tr∆∞·ªõc khi g·ª≠i
      if (!imageData || !imageData.startsWith('data:image/')) {
        throw new Error('D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá');
      }
      
      const base64Data = imageData.split(',')[1];
      if (!base64Data || base64Data.length < 1000) {
        throw new Error('·∫¢nh qu√° nh·ªè ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu');
      }
      
      let endpoint;
      
      if (mode === 'register') {
        // S·ª¨ D·ª§NG API M·ªöI - lu√¥n d√πng save-face cho register
        endpoint = 'https://10.10.68.72:8000/api/face-storage/save-face';
      } else {
        // S·ª¨ D·ª§NG API M·ªöI - d√πng compare-face cho verify
        endpoint = 'https://10.10.68.72:8000/api/face-storage/compare-face';
      }

      // Debug: Log request info
      console.log('üîç Face auth request info:');
      console.log('- Endpoint:', endpoint);
      console.log('- Mode:', mode);
      console.log('- Image size:', imageData.length, 'characters');
      console.log('- Image format:', imageData.split(',')[0]);
      console.log('- Base64 data length:', base64Data.length);

      // S·ª≠ d·ª•ng axios cho t·∫•t c·∫£ requests
      const { api } = await import('../utils/api');
      
      // T·∫°o form data
      const formData = new FormData();
      formData.append('image_data', imageData);
      
      // API M·ªöI: register c·∫ßn username, compare kh√¥ng c·∫ßn
      if (mode === 'register') {
        // L·∫•y username t·ª´ auth store ho·∫∑c localStorage (required for register)
        const authStore = useAuthStore.getState();
        const username = authStore.user?.username || localStorage.getItem('username');
        
        if (username) {
          formData.append('username', username);
          console.log('üîç Adding username to register request:', username);
        } else {
          throw new Error('Username is required for face registration');
        }
      } else {
        // compare-face kh√¥ng c·∫ßn username, s·∫Ω so s√°nh v·ªõi t·∫•t c·∫£
        console.log('üîç Compare mode: will search all accounts');
      }
      
      // G·ª≠i request v·ªõi axios
      const response = await api.post(endpoint.replace('https://10.10.68.72:8000/api', ''), formData);

      console.log('üì° Response status:', response.status, response.statusText);
      
      // X·ª≠ l√Ω response t·ª´ axios
      const result = response.data;
      console.log('üì° Response data:', result);

      if (result.success) {
        setSuccess(result.message);
        
        // L∆∞u token t·ª´ face authentication (cho c·∫£ register v√† verify)
        if (result.access_token) {
          console.log('FACE AUTH DEBUG: Saving token and user data:', result);
          
          // L∆∞u v√†o localStorage TR∆Ø·ªöC
          localStorage.setItem('access_token', result.access_token);
          localStorage.setItem('token_type', result.token_type || 'bearer');
          
          // L∆∞u v√†o store v·ªõi debug log
          const { setToken, setUser } = useAuthStore.getState();
          console.log('FACE AUTH DEBUG: Before setToken - Store state:', useAuthStore.getState());
          
          setToken(result.access_token);
          // API M·ªöI: compare-face tr·∫£ v·ªÅ matched_user, register tr·∫£ v·ªÅ user
          const userData = result.matched_user || result.user;
          setUser(userData);
          
          // Set isAuthenticated = true
          useAuthStore.setState({ isAuthenticated: true });
          
          console.log('FACE AUTH DEBUG: After setToken - Store state:', useAuthStore.getState());
          console.log('FACE AUTH DEBUG: localStorage access_token:', localStorage.getItem('access_token'));
          
          // Set token trong API headers ngay l·∫≠p t·ª©c
          const { api } = await import('../utils/api');
          api.defaults.headers.common['Authorization'] = `Bearer ${result.access_token}`;
          
          console.log('FACE AUTH DEBUG: API headers set:', api.defaults.headers.common['Authorization']);
          
          // Force persist to localStorage
          const authState = {
            user: userData,
            token: result.access_token,
            isAuthenticated: true
          };
          localStorage.setItem('auth-storage', JSON.stringify(authState));
          console.log('FACE AUTH DEBUG: Force saved to auth-storage:', authState);
        }
        
        if (mode === 'register') {
          onRegisterSuccess?.();
          setTimeout(() => {
            onClose();
          }, 2000);
        } else {
          // API M·ªöI: compare-face tr·∫£ v·ªÅ matched_user thay v√¨ user
          if (result.matched_user) {
            onSuccess(result.matched_user);
          } else {
            onSuccess(result.user); // fallback
          }
          // Close modal immediately
          onClose();
        }
      } else {
        setError(result.message || 'C√≥ l·ªói x·∫£y ra');
      }
    } catch (err: any) {
      console.error('‚ùå Face auth error:', err);
      
      let errorMessage = 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c khu√¥n m·∫∑t';
      
      if (err.response) {
        // Axios error
        const errorData = err.response.data;
        errorMessage = errorData?.detail || errorData?.message || errorMessage;
      } else if (err.message) {
        // Fetch error ho·∫∑c other error
        errorMessage = err.message;
      }
      
      // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
      if (errorMessage.includes('Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t')) {
        errorMessage = 'Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t trong ·∫£nh. Vui l√≤ng ch·ª•p l·∫°i v·ªõi khu√¥n m·∫∑t r√µ r√†ng.';
      } else if (errorMessage.includes('nhi·ªÅu h∆°n 1 khu√¥n m·∫∑t')) {
        errorMessage = 'Ph√°t hi·ªán nhi·ªÅu khu√¥n m·∫∑t. Vui l√≤ng ch·ª•p l·∫°i ch·ªâ c√≥ 1 khu√¥n m·∫∑t.';
      } else if (errorMessage.includes('Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t ph√π h·ª£p')) {
        errorMessage = 'Khu√¥n m·∫∑t kh√¥ng kh·ªõp v·ªõi t√†i kho·∫£n n√†o. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ƒëƒÉng k√Ω m·ªõi.';
      } else if (errorMessage.includes('D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá')) {
        errorMessage = '·∫¢nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ª•p l·∫°i.';
      } else if (errorMessage.includes('·∫¢nh qu√° nh·ªè')) {
        errorMessage = '·∫¢nh qu√° nh·ªè ho·∫∑c ch·∫•t l∆∞·ª£ng k√©m. Vui l√≤ng ch·ª•p l·∫°i v·ªõi ch·∫•t l∆∞·ª£ng t·ªët h∆°n.';
      }
      
      setError(errorMessage);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleCapture = async () => {
    if (isCapturing || isProcessing) return;

    setIsCapturing(true);
    const imageData = capturePhoto();
    
    if (imageData) {
      await processFaceAuth(imageData);
    }
    
    // Reset capturing state immediately
    setIsCapturing(false);
  };

  const handleClose = () => {
    stopCamera();
    setError(null);
    setSuccess(null);
    onClose();
  };

  // Start camera when modal opens
  React.useEffect(() => {
    if (isOpen) {
      startCamera();
    } else {
      stopCamera();
    }

    return () => {
      stopCamera();
    };
  }, [isOpen]); // Only depend on isOpen

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4" style={{
        // T·ªëi ∆∞u performance cho modal
        willChange: 'transform',
        backfaceVisibility: 'hidden',
        transform: 'translateZ(0)'
      }}>
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">
            {mode === 'register' ? 'ƒêƒÉng k√Ω/C·∫≠p nh·∫≠t khu√¥n m·∫∑t' : 'X√°c th·ª±c khu√¥n m·∫∑t'}
          </h3>
          <button
            onClick={handleClose}
            className="text-gray-500 hover:text-gray-700"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        <div className="space-y-4">
          {/* Camera Preview */}
          <div className="relative bg-gray-100 rounded-lg overflow-hidden">
        <video
          ref={videoRef}
          autoPlay
          playsInline
          muted
          className="w-full h-80 object-cover"
          style={{
            transform: 'scaleX(-1)', // Mirror effect
            filter: 'brightness(1.1) contrast(1.1) saturate(1.1)', // Better visibility
            objectFit: 'cover',
            // Th√™m CSS ƒë·ªÉ gi·∫£m gi·∫≠t
            imageRendering: 'auto',
            backfaceVisibility: 'hidden',
            perspective: '1000px',
            transformStyle: 'preserve-3d'
          }}
          // Th√™m attributes ƒë·ªÉ t·ªëi ∆∞u performance
          preload="auto"
          webkit-playsinline="true"
        />
            <canvas
              ref={canvasRef}
              className="hidden"
            />
            
            {/* Overlay for face detection */}
            <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
              <div className="w-56 h-56 border-3 border-white border-dashed rounded-full opacity-70 shadow-lg">
                <div className="absolute top-4 left-1/2 transform -translate-x-1/2 text-white text-sm font-medium">
                  ƒê·∫∑t khu√¥n m·∫∑t trong khung n√†y
                </div>
              </div>
            </div>
            
            {/* Status indicator */}
            {stream && (
              <div className="absolute top-4 right-4 bg-green-500 text-white px-2 py-1 rounded-full text-xs">
                üìπ Camera ƒëang ho·∫°t ƒë·ªông
              </div>
            )}
          </div>

          {/* Instructions */}
          <div className="text-sm text-gray-600 text-center">
            {mode === 'register' ? (
              <p>ƒê·∫∑t khu√¥n m·∫∑t trong khung tr√≤n v√† nh·∫•n ch·ª•p ·∫£nh ƒë·ªÉ ƒëƒÉng k√Ω/c·∫≠p nh·∫≠t</p>
            ) : (
              <p>Nh√¨n v√†o camera v√† nh·∫•n ch·ª•p ·∫£nh ƒë·ªÉ x√°c th·ª±c</p>
            )}
          </div>

          {/* Status Messages */}
          {error && (
            <div className="flex items-center space-x-2 text-red-600 bg-red-50 p-3 rounded-lg">
              <AlertCircle className="w-5 h-5" />
              <span className="text-sm">{error}</span>
            </div>
          )}

          {success && (
            <div className="flex items-center space-x-2 text-green-600 bg-green-50 p-3 rounded-lg">
              <CheckCircle className="w-5 h-5" />
              <span className="text-sm">{success}</span>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex space-x-3">
            <button
              onClick={handleCapture}
              disabled={isCapturing || isProcessing || !stream}
              className="flex-1 flex items-center justify-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-200"
            >
              {isCapturing ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>ƒêang ch·ª•p...</span>
                </>
              ) : isProcessing ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>ƒêang x·ª≠ l√Ω...</span>
                </>
              ) : (
                <>
                  <Camera className="w-4 h-4" />
                  <span>{isCapturing ? 'ƒêang ch·ª•p...' : 'Ch·ª•p ·∫£nh'}</span>
                </>
              )}
            </button>

            <button
              onClick={handleClose}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
            >
              H·ªßy
            </button>
          </div>

          {/* Tips */}
          <div className="text-xs text-gray-500 space-y-1">
            <p>üí° M·∫πo:</p>
            <ul className="list-disc list-inside space-y-1 ml-2">
              <li>ƒê·∫£m b·∫£o √°nh s√°ng ƒë·ªß</li>
              <li>Nh√¨n th·∫≥ng v√†o camera</li>
              <li>Gi·ªØ khu√¥n m·∫∑t trong khung tr√≤n</li>
              <li>Tr√°nh ƒëeo k√≠nh r√¢m ho·∫∑c kh·∫©u trang</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FaceAuthModal;
