import React, { useState, useEffect } from 'react';
import { Plus, Edit, Trash2, QrCode, Download, Printer, MapPin, Eye, X, CheckCircle, Clock, Calendar } from 'lucide-react';
import { useAuthStore } from '../stores/authStore';
import { toast } from 'react-hot-toast';
import { api } from '../utils/api';
import TimeRangePicker from '../components/TimeRangePicker';

interface Location {
  id: number;
  name: string;
  description?: string;
  address?: string;
  latitude?: number;
  longitude?: number;
}

interface PatrolTask {
  id: number;
  title: string;
  description?: string;
  assigned_to?: number | { id: number; full_name: string };
  status: 'pending' | 'in_progress' | 'completed';
  priority: 'low' | 'medium' | 'high';
  due_date?: string;
  location_id?: number | { id: number; name: string };
  schedule_week?: string;
  created_at: string;
  stops?: Array<{
    location_id: number;
    location_name: string;
    sequence: number;
    required: boolean;
    scheduled_time?: string;
    visited: boolean;
    visited_at?: string;
  }>;
}

interface QRCode {
  id: number;
  content: string;
  type: 'static' | 'dynamic';
  location_name?: string;
  created_at: string;
}

// Component n√∫t ho√†n th√†nh nhi·ªám v·ª• trong modal v·ªõi ki·ªÉm tra tr·∫°ng th√°i
const TaskCompleteButtonModal: React.FC<{ taskId: number; onComplete: (taskId: number) => void }> = ({ taskId, onComplete }) => {
  const [completionStatus, setCompletionStatus] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkCompletionStatus = async () => {
      try {
        const response = await api.get(`/patrol-tasks/${taskId}/completion-status`);
        setCompletionStatus(response.data);
      } catch (error) {
        console.error('Error checking completion status:', error);
      } finally {
        setLoading(false);
      }
    };
    
    checkCompletionStatus();
  }, [taskId]);

  if (loading) {
    return <div className="text-sm text-gray-500">ƒêang ki·ªÉm tra...</div>;
  }

  if (!completionStatus) {
    return <div className="text-sm text-red-500">Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i</div>;
  }

  const canComplete = completionStatus.can_complete;
  const missingStops = completionStatus.missing_stops || [];

  return (
    <div className="space-y-3">
      {canComplete ? (
    <button
      onClick={() => onComplete(taskId)}
          className="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center justify-center space-x-2"
    >
      <CheckCircle className="w-4 h-4" />
          <span>Ho√†n th√†nh nhi·ªám v·ª•</span>
    </button>
      ) : (
        <div className="text-sm text-yellow-600 bg-yellow-50 p-3 rounded-lg">
          <p className="font-medium mb-2">Ch∆∞a th·ªÉ ho√†n th√†nh:</p>
          <ul className="list-disc list-inside space-y-1">
            {missingStops.map((stop: any, index: number) => (
              <li key={index}>
                {stop.location_name} {stop.scheduled_time && `(${stop.scheduled_time})`}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

// Component n√∫t ho√†n th√†nh nhi·ªám v·ª• ƒë∆°n gi·∫£n
const TaskCompleteButton: React.FC<{ taskId: number; onComplete: (taskId: number) => void }> = ({ taskId, onComplete }) => {
  const [showModal, setShowModal] = useState(false);

    return (
    <>
    <button
        onClick={() => setShowModal(true)}
        className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2"
      title="Ho√†n th√†nh nhi·ªám v·ª•"
    >
      <CheckCircle className="w-4 h-4" />
        <span>Ho√†n th√†nh</span>
    </button>

      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Ho√†n th√†nh nhi·ªám v·ª•</h3>
              <button
                onClick={() => setShowModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-5 h-5" />
              </button>
        </div>
            
            <TaskCompleteButtonModal 
              taskId={taskId} 
              onComplete={(id) => {
                onComplete(id);
                setShowModal(false);
              }} 
            />
        </div>
              </div>
            )}
    </>
  );
};

const TasksPage: React.FC = () => {
  const { user } = useAuthStore();
  const [activeTab, setActiveTab] = useState<'tasks' | 'qr'>('tasks');
  // Helper functions for task properties
  const getTaskStatusColor = (task: any) => {
    if (task.status === 'completed') return 'green';
    if (task.status === 'in_progress') return 'blue';
    if (task.status === 'pending') return 'yellow';
    if (task.status === 'overdue') return 'red';
    return 'gray';
  };

  const getTaskStatusText = (task: any) => {
    if (task.status === 'completed') return 'Ho√†n th√†nh';
    if (task.status === 'in_progress') return 'ƒêang th·ª±c hi·ªán';
    if (task.status === 'pending') return 'Ch·ªù th·ª±c hi·ªán';
    if (task.status === 'overdue') return 'Qu√° h·∫°n';
    return 'Kh√¥ng x√°c ƒë·ªãnh';
  };

  const getTaskLocationName = (task: any): string => {
    return task.location?.name || 'Kh√¥ng x√°c ƒë·ªãnh';
  };

  const [tasks, setTasks] = useState<PatrolTask[]>([]);
  const [qrCodes, setQrCodes] = useState<QRCode[]>([]);
  const [locations, setLocations] = useState<Location[]>([]);
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingTask, setEditingTask] = useState<PatrolTask | null>(null);
  const [showQRModal, setShowQRModal] = useState(false);
  const [selectedQRCode, setSelectedQRCode] = useState<QRCode | null>(null);
  const [showCreateQRModal, setShowCreateQRModal] = useState(false);
  const [qrData, setQrData] = useState({
    data: '',
    type: 'static' as 'static' | 'dynamic',
    location_id: ''
  });

  // Form states
  const [taskData, setTaskData] = useState({
    title: '',
    description: '',
    assigned_to: '',
    priority: 'low' as 'low' | 'medium' | 'high',
    due_date: '',
    location_id: '',
    schedule_week: ''
  });
  
  const [stops, setStops] = useState<Array<{ qr_code_id: string; qr_code_name: string; scheduled_time: string }>>([{ qr_code_id: '', qr_code_name: '', scheduled_time: '' }]);

  const isManagerOrAdmin = user?.role === 'manager' || user?.role === 'admin';

  useEffect(() => {
    fetchTasks();
    if (isManagerOrAdmin) {
    fetchLocations();
    fetchUsers();
    fetchQRCodes();
    }
  }, [isManagerOrAdmin]);

  const fetchTasks = async () => {
    try {
      // Get auth token
      const token = localStorage.getItem('auth-storage') ? 
        JSON.parse(localStorage.getItem('auth-storage')!).state.token : null;
      
      if (!token) {
        console.log('No token found for fetching tasks');
        return;
      }

      // Load tasks based on user role
      let response;
      if (user?.role === 'employee') {
        // Employee ch·ªâ xem nhi·ªám v·ª• ƒë∆∞·ª£c giao
        response = await api.get('/patrol-tasks/my-tasks');
      } else {
        // Admin/Manager xem t·∫•t c·∫£ nhi·ªám v·ª•
        response = await api.get('/patrol-tasks/');
      }
      
      const tasks = response.data || [];
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i real-time cho t·ª´ng task
      const updatedTasks = tasks.map((task: any) => {
        const realTimeStatus = getTaskRealTimeStatus(task);
        return {
          ...task,
          status: realTimeStatus.status,
          statusText: realTimeStatus.text,
          statusColor: realTimeStatus.color
        };
      });
      
      setTasks(updatedTasks);
    } catch (error) {
      console.error('Error fetching tasks:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch nhi·ªám v·ª•');
    } finally {
      setLoading(false);
    }
  };

  // H√†m ki·ªÉm tra tr·∫°ng th√°i real-time c·ªßa task
  const getTaskRealTimeStatus = (task: any) => {
    const now = new Date();
    // S·ª≠ d·ª•ng timezone Vi·ªát Nam tr·ª±c ti·∫øp
    const vietnamTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Ho_Chi_Minh"}));
    const currentDate = vietnamTime.toISOString().split('T')[0];
    const currentTime = vietnamTime.getHours() * 60 + vietnamTime.getMinutes();
    
    console.log('=== TASK STATUS DEBUG (TasksPage) ===');
    console.log('Task:', task.title);
    console.log('Current time (Vietnam):', vietnamTime.toLocaleString('vi-VN'));
    console.log('Current time (minutes):', currentTime);
    console.log('Current date:', currentDate);
    
    // L·∫•y ng√†y c·ªßa task
    let taskDate = null;
    try {
      const schedule = JSON.parse(task.schedule_week);
      taskDate = schedule.date;
    } catch (e) {
      // Fallback
    }
    
    // Ki·ªÉm tra ng√†y c·ªßa task so v·ªõi ng√†y hi·ªán t·∫°i
    const isToday = taskDate === currentDate;
    const isPastTask = taskDate && taskDate < currentDate; // Task h√¥m qua ho·∫∑c tr∆∞·ªõc ƒë√≥
    const isFutureTask = taskDate && taskDate > currentDate; // Task t∆∞∆°ng lai
    
    // N·∫øu ƒë√£ ho√†n th√†nh th·ª±c s·ª±
    if (task.status === 'completed') {
      return { status: 'completed', text: '‚úÖ Ho√†n th√†nh', color: 'green' };
    }
    
    // X·ª≠ l√Ω task qu√° kh·ª© (h√¥m qua ho·∫∑c tr∆∞·ªõc ƒë√≥)
    if (isPastTask) {
      if (task.status === 'completed') {
        return { status: 'completed', text: '‚úÖ Ho√†n th√†nh', color: 'green' };
      } else {
        return { status: 'overdue', text: 'üî¥ Qu√° h·∫°n', color: 'red' };
      }
    }
    
    // X·ª≠ l√Ω task t∆∞∆°ng lai
    if (isFutureTask) {
      return { status: 'pending', text: '‚è≥ Ch∆∞a ƒë·∫øn ng√†y', color: 'gray' };
    }
    
    // X·ª≠ l√Ω task h√¥m nay
    if (isToday) {
      // L·∫•y th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ stops
      let startTime = null;
      let endTime = null;
      
      if (task.stops && task.stops.length > 0) {
        // T√¨m th·ªùi gian s·ªõm nh·∫•t (b·∫Øt ƒë·∫ßu)
        const startStop = task.stops.reduce((earliest: any, stop: any) => {
          if (stop.scheduled_time) {
            const [hours, minutes] = stop.scheduled_time.split(':').map(Number);
            const time = hours * 60 + minutes;
            if (!earliest || time < earliest.time) {
              return { time, stop };
            }
          }
          return earliest;
        }, null);
        
        // T√¨m th·ªùi gian mu·ªôn nh·∫•t (k·∫øt th√∫c)
        const endStop = task.stops.reduce((latest: any, stop: any) => {
          if (stop.scheduled_time) {
            const [hours, minutes] = stop.scheduled_time.split(':').map(Number);
            const time = hours * 60 + minutes;
            if (!latest || time > latest.time) {
              return { time, stop };
            }
          }
          return latest;
        }, null);
        
        if (startStop) startTime = startStop.time;
        if (endStop) endTime = endStop.time;
      }
      
      if (startTime && endTime) {
        // Th√™m 30 ph√∫t buffer cho th·ªùi gian k·∫øt th√∫c
        const endTimeWithBuffer = endTime + 30;
        
        console.log('Start time (minutes):', startTime);
        console.log('End time (minutes):', endTime);
        console.log('End time with buffer:', endTimeWithBuffer);
        console.log('Current < Start?', currentTime < startTime);
        console.log('Current >= Start && <= End?', currentTime >= startTime && currentTime <= endTimeWithBuffer);
        console.log('Current > End?', currentTime > endTimeWithBuffer);
        
        if (task.status === 'completed') {
          console.log('Status: COMPLETED');
          return { status: 'completed', text: '‚úÖ Ho√†n th√†nh', color: 'green' };
        } else if (currentTime < startTime) {
          console.log('Status: PENDING (ch∆∞a ƒë·∫øn gi·ªù)');
          return { status: 'pending', text: '‚è≥ Ch·ªù th·ª±c hi·ªán', color: 'blue' };
        } else if (currentTime >= startTime && currentTime <= endTimeWithBuffer) {
          console.log('Status: IN_PROGRESS (trong gi·ªù l√†m vi·ªác)');
          return { status: 'in_progress', text: 'üü° ƒêang th·ª±c hi·ªán', color: 'yellow' };
        } else {
          console.log('Status: OVERDUE (qu√° h·∫°n)');
          return { status: 'overdue', text: 'üî¥ Qu√° h·∫°n', color: 'red' };
        }
      } else {
        // N·∫øu kh√¥ng c√≥ scheduled time, ki·ªÉm tra tr·∫°ng th√°i g·ªëc
        if (task.status === 'completed') {
          return { status: 'completed', text: '‚úÖ Ho√†n th√†nh', color: 'green' };
        } else {
          return { status: 'pending', text: '‚è≥ Ch·ªù th·ª±c hi·ªán', color: 'blue' };
        }
      }
    }
    
    // Fallback v·ªÅ tr·∫°ng th√°i g·ªëc
    return {
      status: task.status,
      text: task.status === 'completed' ? '‚úÖ Ho√†n th√†nh' : 
            task.status === 'in_progress' ? 'üîÑ ƒêang th·ª±c hi·ªán' : 
            '‚è≥ ƒêang ch·ªù',
      color: task.status === 'completed' ? 'green' : 
             task.status === 'in_progress' ? 'blue' : 'yellow'
    };
  };

  const fetchLocations = async () => {
    try {
      const response = await api.get('/locations/');
      setLocations(response.data || []);
    } catch (error) {
      console.error('Error fetching locations:', error);
    }
  };

  const fetchUsers = async () => {
    try {
      const response = await api.get('/users/');
      setUsers(response.data || []);
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };

  const fetchQRCodes = async () => {
    try {
      const response = await api.get('/qr-codes/');
      setQrCodes(response.data || []);
    } catch (error) {
      console.error('Error fetching QR codes:', error);
    }
  };

  const completeTask = async (taskId: number) => {
    try {
      await api.put(`/patrol-tasks/${taskId}/complete`);
      toast.success('Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh!');
      await fetchTasks(); // Refresh task list
    } catch (error) {
      console.error('Error completing task:', error);
      toast.error('Kh√¥ng th·ªÉ ho√†n th√†nh nhi·ªám v·ª•');
    }
  };

  const deleteTask = async (taskId: number) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nhi·ªám v·ª• n√†y?')) {
        return;
      }

    try {
      await api.delete(`/patrol-tasks/${taskId}`);
      toast.success('Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c x√≥a!');
      await fetchTasks();
    } catch (error) {
      console.error('Error deleting task:', error);
      toast.error('Kh√¥ng th·ªÉ x√≥a nhi·ªám v·ª•');
    }
  };

  const generateQRForTask = async (taskId: number) => {
    try {
      // S·ª≠ d·ª•ng API c≈© v·ªõi query parameters
      const response = await api.post(`/qr-codes/generate?task_id=${taskId}&data=Task ${taskId}&type=task`);
      toast.success('QR code ƒë√£ ƒë∆∞·ª£c t·∫°o!');
      await fetchQRCodes();
    } catch (error) {
      console.error('Error generating QR code:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫°o QR code');
    }
  };

  const createQRCode = async () => {
    try {
      const url = `/qr-codes/generate?data=${encodeURIComponent(qrData.data)}&type=${qrData.type}`;
      const response = await api.post(url);
      toast.success('QR code ƒë√£ ƒë∆∞·ª£c t·∫°o!');
      await fetchQRCodes();
      setShowCreateQRModal(false);
      setQrData({ data: '', type: 'static', location_id: '' });
    } catch (error) {
      console.error('Error creating QR code:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫°o QR code');
    }
  };

  const deleteQRCode = async (qrId: number) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a QR code n√†y?')) {
      return;
    }
    
    try {
      await api.delete(`/qr-codes/${qrId}`);
      toast.success('QR code ƒë√£ ƒë∆∞·ª£c x√≥a!');
      await fetchQRCodes();
    } catch (error) {
      console.error('Error deleting QR code:', error);
      toast.error('Kh√¥ng th·ªÉ x√≥a QR code');
    }
  };

  const editTask = (task: PatrolTask) => {
    setEditingTask(task);
    setTaskData({
      title: task.title,
      description: task.description || '',
      assigned_to: typeof task.assigned_to === 'object' ? task.assigned_to.id.toString() : (task.assigned_to?.toString() || ''),
      priority: task.priority,
      due_date: task.due_date || '',
      location_id: typeof task.location_id === 'object' ? task.location_id.id.toString() : (task.location_id?.toString() || ''),
      schedule_week: task.schedule_week || ''
    });
    setShowCreateModal(true);
  };

  const addStop = () => {
    setStops([...stops, { qr_code_id: '', qr_code_name: '', scheduled_time: '' }]);
  };

  const removeStop = (index: number) => {
    if (stops.length > 1) {
      setStops(stops.filter((_, i) => i !== index));
    }
  };

  const updateStop = (index: number, field: 'qr_code_id' | 'qr_code_name' | 'scheduled_time', value: string) => {
    const newStops = [...stops];
    newStops[index][field] = value;
    setStops(newStops);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const validStops = stops.filter(stop => stop.qr_code_id.trim() && stop.scheduled_time.trim());
      
      console.log('Raw stops:', stops);
      console.log('Valid stops:', validStops);
      
      const taskPayload = {
        title: taskData.title,
        description: taskData.description,
        assigned_to: taskData.assigned_to ? parseInt(taskData.assigned_to) : 1,  // Default to user ID 1
        location_id: taskData.location_id ? parseInt(taskData.location_id) : 1,  // Convert to number
        schedule_week: taskData.schedule_week ? JSON.parse(taskData.schedule_week) : {},  // Parse JSON string to object
        stops: validStops.map((stop, index) => ({
          qr_code_id: stop.qr_code_id,  // S·ª≠ d·ª•ng QR code ID
          qr_code_name: stop.qr_code_name,  // T√™n QR code
          sequence: index,  // Th·ª© t·ª±
          scheduled_time: stop.scheduled_time.trim(),
          required: true
        }))
      };

      console.log('Sending task payload:', taskPayload);
      console.log('Stops data:', validStops);

      if (editingTask) {
        await api.put(`/patrol-tasks/${editingTask.id}`, taskPayload);
        toast.success('Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
      } else {
        await api.post('/patrol-tasks/', taskPayload);
        toast.success('Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c t·∫°o!');
      }

      setShowCreateModal(false);
      setEditingTask(null);
      setTaskData({
      title: '',
      description: '',
      assigned_to: '',
        priority: 'low',
        due_date: '',
      location_id: '',
      schedule_week: ''
    });
    setStops([{ qr_code_id: '', qr_code_name: '', scheduled_time: '' }]);
      await fetchTasks();
    } catch (error) {
      console.error('Error saving task:', error);
      toast.error('Kh√¥ng th·ªÉ l∆∞u nhi·ªám v·ª•');
    }
  };

  const downloadQR = (qrCode: QRCode) => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // T·∫°o QR code ƒë∆°n gi·∫£n (trong th·ª±c t·∫ø s·∫Ω d√πng th∆∞ vi·ªán QR)
    canvas.width = 200;
    canvas.height = 200;
    ctx.fillStyle = '#000';
    ctx.fillRect(0, 0, 200, 200);
    ctx.fillStyle = '#fff';
    ctx.font = '12px Arial';
    ctx.fillText(qrCode.content, 10, 100);

        const link = document.createElement('a');
    link.download = `qr-${qrCode.id}.png`;
    link.href = canvas.toDataURL();
        link.click();
  };

  const printQR = (qrCode: QRCode) => {
    const printWindow = window.open('', '_blank');
        if (printWindow) {
      printWindow.document.write(`
        <html>
          <head><title>QR Code - ${qrCode.content}</title></head>
          <body style="text-align: center; padding: 20px;">
            <h2>QR Code</h2>
            <div style="border: 1px solid #ccc; padding: 20px; display: inline-block;">
              <div style="width: 200px; height: 200px; background: #f0f0f0; display: flex; align-items: center; justify-content: center;">
                ${qrCode.content}
              </div>
            </div>
            <p>N·ªôi dung: ${qrCode.content}</p>
            <p>T·∫°o l√∫c: ${new Date(qrCode.created_at).toLocaleString('vi-VN')}</p>
          </body>
        </html>
      `);
      printWindow.document.close();
          printWindow.print();
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-green-500"></div>
      </div>
    );
  }

  return (
    <div className="p-6">
        <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Qu·∫£n l√Ω Nhi·ªám v·ª• & QR Code</h1>
        <p className="text-gray-600">Qu·∫£n l√Ω nhi·ªám v·ª• tu·∫ßn tra v√† t·∫°o m√£ QR</p>
        </div>

      {/* Tabs */}
      <div className="mb-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('tasks')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'tasks'
                  ? 'border-green-500 text-green-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              Nhi·ªám v·ª•
            </button>
            {isManagerOrAdmin && (
              <button
                onClick={() => setActiveTab('qr')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'qr'
                    ? 'border-green-500 text-green-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                QR Codes
              </button>
            )}
          </nav>
        </div>
      </div>

      {activeTab === 'tasks' && (
        <>
          {/* Create Task Button - Only for Admin/Manager */}
          {isManagerOrAdmin && (
            <div className="mb-6">
              <button
                onClick={() => setShowCreateModal(true)}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center space-x-2"
              >
                <Plus className="w-4 h-4" />
                <span>T·∫°o nhi·ªám v·ª• m·ªõi</span>
              </button>
            </div>
          )}

          {/* Create/Edit Task Modal */}
          {showCreateModal && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">
                    {editingTask ? 'S·ª≠a nhi·ªám v·ª•' : 'T·∫°o nhi·ªám v·ª• m·ªõi'}
                  </h3>
                  <button
                    onClick={() => {
                      setShowCreateModal(false);
                      setEditingTask(null);
                      setTaskData({
                        title: '',
                        description: '',
                        assigned_to: '',
                        priority: 'low',
                        due_date: '',
                        location_id: '',
                        schedule_week: ''
                      });
                      setStops([{ qr_code_id: '', qr_code_name: '', scheduled_time: '' }]);
                    }}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>

                <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                        Ti√™u ƒë·ªÅ *
                    </label>
                    <input
                      type="text"
                        value={taskData.title}
                        onChange={(e) => setTaskData({ ...taskData, title: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                        required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      M√¥ t·∫£
                    </label>
                      <input
                        type="text"
                        value={taskData.description}
                        onChange={(e) => setTaskData({ ...taskData, description: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                        Giao cho
                      </label>
                      <select
                        value={taskData.assigned_to}
                        onChange={(e) => setTaskData({ ...taskData, assigned_to: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                      >
                        <option value="">Ch·ªçn ng∆∞·ªùi th·ª±c hi·ªán</option>
                        {users.map((user) => (
                          <option key={user.id} value={user.id}>
                            {user.full_name || user.username}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        ƒê·ªô ∆∞u ti√™n
                      </label>
                      <select
                        value={taskData.priority}
                        onChange={(e) => setTaskData({ ...taskData, priority: e.target.value as 'low' | 'medium' | 'high' })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                      >
                        <option value="low">Th·∫•p</option>
                        <option value="medium">Trung b√¨nh</option>
                        <option value="high">Cao</option>
                      </select>
                    </div>

                  
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        V·ªã tr√≠ ch√≠nh
                    </label>
                    <select
                      value={taskData.location_id}
                      onChange={(e) => setTaskData({ ...taskData, location_id: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                    >
                      <option value="">Ch·ªçn v·ªã tr√≠</option>
                      {locations.map((location) => (
                        <option key={location.id} value={location.id}>
                          {location.name}
                        </option>
                      ))}
                    </select>
                    </div>
                  </div>
                  
                  {/* Time Range Picker */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Th·ªùi gian th·ª±c hi·ªán
                    </label>
                    <TimeRangePicker
                      value={taskData.schedule_week}
                      onChange={(value) => setTaskData({ ...taskData, schedule_week: value })}
                    />
                  </div>

                  {/* Stops */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      C√°c ƒëi·ªÉm d·ª´ng (Stops)
                    </label>
                    <div className="space-y-3">
                      {stops.map((stop, index) => (
                        <div key={index} className="flex gap-2 items-end">
                          <div className="flex-1">
                            <label className="block text-xs text-gray-600 mb-1">
                              V·ªã tr√≠ {index + 1}
                            </label>
                            <select
                              value={stop.qr_code_id}
                              onChange={(e) => {
                                const selectedQR = qrCodes.find(qr => qr.id.toString() === e.target.value);
                                updateStop(index, 'qr_code_id', e.target.value);
                                updateStop(index, 'qr_code_name', selectedQR?.data || selectedQR?.content || '');
                              }}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 text-sm"
                            >
                              <option value="">Ch·ªçn QR Code...</option>
                              {qrCodes.map((qr) => (
                                <option key={qr.id} value={qr.id}>
                                  {qr.data || qr.content || `QR ${qr.id}`} ({qr.type})
                                </option>
                              ))}
                            </select>
                          </div>
                          <div className="w-32">
                            <label className="block text-xs text-gray-600 mb-1">
                              T√™n QR Code
                            </label>
                            <input
                              type="text"
                              value={stop.qr_code_name}
                              onChange={(e) => updateStop(index, 'qr_code_name', e.target.value)}
                              placeholder="T√™n QR code"
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 text-sm"
                            />
                          </div>
                          <div className="w-24">
                            <label className="block text-xs text-gray-600 mb-1">
                              Th·ªùi gian
                            </label>
                            <input
                              type="time"
                              value={stop.scheduled_time}
                              onChange={(e) => updateStop(index, 'scheduled_time', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 text-sm"
                            />
                          </div>
                          {stops.length > 1 && (
                            <button
                              type="button"
                              onClick={() => removeStop(index)}
                              className="px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          )}
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={addStop}
                        className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 text-sm"
                      >
                        + Th√™m ƒëi·ªÉm d·ª´ng
                      </button>
                    </div>
                  </div>
                  
                  <div className="flex justify-end space-x-3">
                    <button 
                      type="button" 
                      onClick={() => {
                        setShowCreateModal(false);
                        setEditingTask(null);
                      }}
                      className="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300"
                    >
                      H·ªßy
                    </button>
                    <button
                      type="submit"
                      className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                    >
                      {editingTask ? 'C·∫≠p nh·∫≠t' : 'T·∫°o nhi·ªám v·ª•'}
                    </button>
                </div>
              </form>
              </div>
            </div>
          )}

          {/* Task List */}
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg">
            <h2 className="text-lg font-semibold mb-3">
              {user?.role === 'employee' ? 'Nhi·ªám v·ª• ƒë∆∞·ª£c giao' : 'Danh s√°ch nhi·ªám v·ª•'}
            </h2>
            
            {tasks.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                {user?.role === 'employee' ? 'B·∫°n ch∆∞a c√≥ nhi·ªám v·ª• n√†o ƒë∆∞·ª£c giao' : 'Ch∆∞a c√≥ nhi·ªám v·ª• n√†o ƒë∆∞·ª£c t·∫°o'}
              </div>
            ) : user?.role === 'employee' ? (
              // Employee view - Flowstep format
              <div className="space-y-6">
                {tasks.map((task) => (
                  <div key={task.id} className={`rounded-lg p-6 border-2 ${
                    getTaskStatusColor(task) === 'green' 
                      ? 'bg-green-50 border-green-200' 
                      : getTaskStatusColor(task) === 'red'
                      ? 'bg-red-50 border-red-200'
                      : getTaskStatusColor(task) === 'yellow'
                      ? 'bg-yellow-50 border-yellow-200'
                      : getTaskStatusColor(task) === 'blue'
                      ? 'bg-blue-50 border-blue-200'
                      : 'bg-gray-50 border-gray-200'
                  }`}>
                    <div className="flex items-center justify-between mb-4">
                      <h4 className="text-xl font-bold text-gray-900">{task.title}</h4>
                      <span className={`px-4 py-2 rounded-full text-lg font-bold ${
                        getTaskStatusColor(task) === 'green' 
                          ? 'bg-green-500 text-white' 
                          : getTaskStatusColor(task) === 'red'
                          ? 'bg-red-500 text-white'
                          : getTaskStatusColor(task) === 'yellow'
                          ? 'bg-yellow-500 text-white'
                          : getTaskStatusColor(task) === 'blue'
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-500 text-white'
                      }`}>
                        {getTaskStatusText(task) || '‚è≥ ƒêang ch·ªù'}
                      </span>
                    </div>
                    
                    {task.description && (
                      <p className="text-lg text-gray-700 mb-3">{task.description}</p>
                    )}
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-start">
                        <MapPin className="w-6 h-6 text-gray-500 mr-3 mt-1" />
                        <div className="flex-1">
                          <p className="text-sm text-gray-600 mb-2">V·ªã tr√≠ c·∫ßn tu·∫ßn tra:</p>
                          {task.stops && task.stops.length > 0 ? (
                            <div className="space-y-2">
                              {task.stops
                                .sort((a, b) => a.sequence - b.sequence)
                                .map((stop, index) => (
                                  <div key={stop.location_id} className="flex items-center">
                                    <span className={`w-6 h-6 rounded-full flex items-center justify-center text-sm mr-3 ${
                                      stop.visited ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-600'
                                    }`}>
                                      {stop.visited ? '‚úì' : index + 1}
                                    </span>
                                    <div className="flex-1">
                                      <p className={`text-sm font-medium ${stop.visited ? 'text-green-700' : 'text-gray-900'}`}>
                                        {stop.location_name}
                                        {stop.scheduled_time && (
                                          <span className="ml-2 text-green-600 font-medium">
                                            ({stop.scheduled_time})
                                          </span>
                                        )}
                                      </p>
                                      {stop.visited_at && (
                                        <p className="text-xs text-gray-500">
                                          ‚úì ƒê√£ ch·∫•m c√¥ng: {new Date(stop.visited_at).toLocaleString('vi-VN', {
                                            month: '2-digit',
                                            day: '2-digit',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                          })}
                                        </p>
                                      )}
                                    </div>
                                  </div>
                                ))
                              }
              </div>
            ) : (
                            <div>
                              <p className="text-lg font-semibold text-gray-900">
                                {getTaskLocationName(task) || 'Ch∆∞a x√°c ƒë·ªãnh'}
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      {task.schedule_week && (
                        <div className="flex items-center">
                          <Clock className="w-6 h-6 text-gray-500 mr-3" />
                          <div>
                            <p className="text-sm text-gray-600">Th·ªùi gian:</p>
                            <p className="text-lg font-semibold text-gray-900">
                              {(() => {
                                try {
                                  const schedule = JSON.parse(task.schedule_week);
                                  const date = schedule.date;
                                  const startTime = schedule.startTime;
                                  const endTime = schedule.endTime;
                                  
                                  // Format ng√†y
                                  const dateObj = new Date(date);
                                  const formattedDate = dateObj.toLocaleDateString('vi-VN', {
                                    day: '2-digit',
                                    month: '2-digit',
                                    year: 'numeric'
                                  });
                                  
                                  return `${formattedDate} | ${startTime} - ${endTime}`;
                                } catch (e) {
                                  return task.schedule_week;
                                }
                              })()}
                            </p>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {task.due_date && (
                      <div className="mt-4 flex items-center">
                        <Calendar className="w-6 h-6 text-gray-500 mr-3" />
                        <div>
                          <p className="text-sm text-gray-600">Ng√†y h·∫°n:</p>
                          <p className="text-lg font-semibold text-gray-900">
                            {new Date(task.due_date).toLocaleDateString('vi-VN')}
                          </p>
                        </div>
                      </div>
                    )}

                    {/* Action buttons */}
                    <div className="mt-4 flex space-x-2">
                      {/* N√∫t Ho√†n th√†nh cho Employee (nhi·ªám v·ª• c·ªßa m√¨nh) */}
                      {user?.role === 'employee' && task.assigned_to === user.id && task.status !== 'completed' && (
                        <TaskCompleteButton taskId={task.id} onComplete={completeTask} />
                      )}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              // Admin/Manager view - Table format
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead>
              <tr className="bg-gray-50">
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ti√™u ƒë·ªÅ</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">M√¥ t·∫£</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Giao cho</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tr·∫°ng th√°i</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ƒê·ªô ∆∞u ti√™n</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ng√†y h·∫°n</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Th·ªùi gian</th>
                <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">V·ªã tr√≠</th>
                <th className="px-4 py-2"></th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
                    {tasks.map((task) => (
                      <tr key={task.id} className="hover:bg-gray-50">
                        <td className="px-4 py-2 text-sm text-gray-900">{String(task.id || '')}</td>
                        <td className="px-4 py-2 text-sm font-medium text-gray-900">{String(task.title || '')}</td>
                        <td className="px-4 py-2 text-sm text-gray-500">{String(task.description || '-')}</td>
                        <td className="px-4 py-2 text-sm text-gray-500">
                          {(task as any).assigned_user_name || 
                           (typeof task.assigned_to === 'object' ? 
                             (task.assigned_to as any)?.full_name || 'ƒê√£ giao' : 
                             task.assigned_to ? 'ƒê√£ giao' : 'Ch∆∞a giao'
                           )}
                        </td>
                        <td className="px-4 py-2">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            getTaskStatusColor(task) === 'green' ? 'bg-green-100 text-green-800' :
                            getTaskStatusColor(task) === 'red' ? 'bg-red-100 text-red-800' :
                            getTaskStatusColor(task) === 'blue' ? 'bg-blue-100 text-blue-800' :
                            getTaskStatusColor(task) === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {getTaskStatusText(task) || 'Ch·ªù x·ª≠ l√Ω'}
                          </span>
                        </td>
                        <td className="px-4 py-2">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            task.priority === 'high' ? 'bg-red-100 text-red-800' :
                            task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {task.priority === 'high' ? 'Cao' :
                             task.priority === 'medium' ? 'Trung b√¨nh' : 'Th·∫•p'}
                          </span>
                        </td>
                        <td className="px-4 py-2 text-sm text-gray-900">
                          {task.due_date ? new Date(task.due_date).toLocaleDateString('vi-VN') : '-'}
                        </td>
                        <td className="px-4 py-2 text-sm text-gray-900">
                          {task.schedule_week ? (() => {
                            try {
                              const schedule = JSON.parse(task.schedule_week);
                              const date = schedule.date;
                              const startTime = schedule.startTime;
                              const endTime = schedule.endTime;
                              
                              // Format ng√†y
                              const dateObj = new Date(date);
                              const formattedDate = dateObj.toLocaleDateString('vi-VN', {
                                day: '2-digit',
                                month: '2-digit',
                                year: 'numeric'
                              });
                              
                              return `${formattedDate} | ${startTime} - ${endTime}`;
                            } catch (e) {
                              return task.schedule_week;
                            }
                          })() : '-'}
                        </td>
                        <td className="px-4 py-2 text-sm text-gray-900">
                          {task.stops && task.stops.length > 0 ? (
                            <div className="space-y-1">
                              {task.stops
                                .sort((a, b) => a.sequence - b.sequence)
                                .map((stop, index) => {
                                  console.log('Admin view - Stop data:', stop, 'Scheduled time:', stop.scheduled_time);
                                  return (
                                  <div key={stop.location_id} className="text-sm">
                                    <span className="font-medium">
                                      {index + 1}. {stop.location_name}
                                      </span>
                                      {stop.scheduled_time && (
                                      <span className="ml-2 text-green-600 font-medium">
                                          ({stop.scheduled_time})
                                        </span>
                                      )}
                                  </div>
                                  );
                                })
                              }
                            </div>
                          ) : (
                            <div>
                              <div className="text-sm">
                                {(task as any).location_name || 
                                 (typeof task.location_id === 'object' ? 
                                   (task.location_id as any)?.name || 'C√≥ v·ªã tr√≠' : 
                                   String(task.location_id || '-')
                                 )}
                              </div>
                              {/* Hi·ªÉn th·ªã th·ªùi gian giao nhi·ªám v·ª• */}
                              {(task as any).created_at && (
                                <div className="text-xs text-gray-500 mt-1 pt-1 border-t border-gray-200">
                                  <span className="font-medium text-green-600">üìÖ Giao l√∫c:</span> {new Date((task as any).created_at).toLocaleString('vi-VN', {
                                    timeZone: 'Asia/Ho_Chi_Minh',
                                    day: '2-digit',
                                    month: '2-digit', 
                                    year: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  })}
                                </div>
                              )}
                            </div>
                          )}
                        </td>
                        <td className="px-4 py-2 text-sm font-medium">
                          <div className="flex space-x-2">
                            {/* N√∫t Edit ch·ªâ cho Admin/Manager */}
                            {isManagerOrAdmin && (
                              <>
                                <button
                                  onClick={() => editTask(task)}
                                  className="text-indigo-600 hover:text-indigo-900"
                                  title="S·ª≠a nhi·ªám v·ª•"
                                >
                                  <Edit className="w-4 h-4" />
                                </button>
                                <button
                                  onClick={() => generateQRForTask(task.id)}
                                  className="text-green-600 hover:text-green-900"
                                  title="T·∫°o QR code cho task"
                                >
                                  <QrCode className="w-4 h-4" />
                                </button>
                              </>
                            )}
                            
                            {/* N√∫t X√≥a ch·ªâ cho Admin */}
                            {user?.role === 'admin' && (
                              <button
                                onClick={() => deleteTask(task.id)}
                                className="text-red-600 hover:text-red-900"
                                title="X√≥a nhi·ªám v·ª•"
                              >
                                <Trash2 className="w-4 h-4" />
                              </button>
                            )}
                          </div>
                        </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
            )}
          </div>
        </>
      )}

      {activeTab === 'qr' && isManagerOrAdmin && (
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 shadow-lg">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold">Danh s√°ch QR Codes</h2>
                    <button 
              onClick={() => setShowCreateQRModal(true)}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center space-x-2"
            >
              <Plus className="w-4 h-4" />
              <span>T·∫°o QR Code m·ªõi</span>
                    </button>
                </div>
          
          {qrCodes.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              Ch∆∞a c√≥ QR code n√†o ƒë∆∞·ª£c t·∫°o
                  </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {qrCodes.map((qrCode) => (
                <div key={qrCode.id} className="bg-white rounded-lg p-4 border border-gray-200">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <h3 className="font-medium text-gray-900">
                        {qrCode.data || qrCode.content || `QR ${qrCode.id}`}
                      </h3>
                      {qrCode.location_name && (
                        <p className="text-sm text-gray-600 mt-1">
                          üìç {qrCode.location_name}
                        </p>
                      )}
                    </div>
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      qrCode.type === 'static' 
                        ? 'bg-blue-100 text-blue-800' 
                        : 'bg-green-100 text-green-800'
                    }`}>
                      {qrCode.type === 'static' ? 'Tƒ©nh' : 'ƒê·ªông'}
                    </span>
                    </div>
                    
                  {/* QR Code Image */}
                  <div className="flex justify-center mb-3">
                    <img 
                      src={`https://10.10.68.72:8000/api/qr-codes/${qrCode.id}/image`}
                      alt={`QR Code ${qrCode.content}`}
                      className="w-32 h-32 border border-gray-300 rounded"
                      crossOrigin="anonymous"
                      onLoad={() => console.log(`‚úÖ QR Code ${qrCode.id} loaded successfully`)}
                      onError={(e) => {
                        console.error(`‚ùå QR Code ${qrCode.id} failed to load:`, e);
                        const target = e.currentTarget;
                        if (target) {
                          target.style.display = 'none';
                          const nextSibling = target.nextElementSibling as HTMLElement;
                          if (nextSibling) {
                            nextSibling.style.display = 'block';
                          }
                        }
                      }}
                    />
                    <div className="w-32 h-32 border border-gray-300 rounded flex items-center justify-center text-gray-500 text-sm" style={{display: 'none'}}>
                      {qrCode.data || qrCode.content || 'QR Code'}
                    </div>
                  </div>
                  
                  <p className="text-xs text-gray-500 mb-3 text-center">
                    T·∫°o: {new Date(qrCode.created_at).toLocaleString('vi-VN')}
                  </p>
                  
                  <div className="flex space-x-2">
                    <button
                      onClick={() => {
                        setSelectedQRCode(qrCode);
                        setShowQRModal(true);
                      }}
                      className="flex-1 px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 flex items-center justify-center space-x-1"
                    >
                      <Eye className="w-3 h-3" />
                      <span>Xem</span>
                    </button>
                    <button
                      onClick={() => downloadQR(qrCode)}
                      className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700"
                      title="T·∫£i xu·ªëng"
                    >
                      <Download className="w-3 h-3" />
                    </button>
                    <button
                      onClick={() => printQR(qrCode)}
                      className="px-3 py-1 bg-gray-600 text-white text-sm rounded hover:bg-gray-700"
                      title="In"
                    >
                      <Printer className="w-3 h-3" />
                    </button>
                    <button
                      onClick={() => deleteQRCode(qrCode.id)}
                      className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
                      title="X√≥a"
                    >
                      <Trash2 className="w-3 h-3" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
                        </div>
                      )}
                      
      {/* QR Code Modal */}
      {showQRModal && selectedQRCode && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Chi ti·∫øt QR Code</h3>
                      <button
                onClick={() => setShowQRModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-5 h-5" />
                      </button>
                    </div>
            
            <div className="text-center">
              <div className="w-80 h-80 bg-white border-4 border-gray-300 rounded-lg flex items-center justify-center mx-auto mb-4 shadow-lg">
                <img 
                  src={`https://10.10.68.72:8000/api/qr-codes/${selectedQRCode.id}/image`}
                  alt={`QR Code ${selectedQRCode.data || selectedQRCode.content}`}
                  className="w-72 h-72 object-contain"
                  onLoad={() => console.log(`‚úÖ QR Modal ${selectedQRCode.id} loaded successfully`)}
                  onError={(e) => {
                    console.error(`‚ùå QR Modal ${selectedQRCode.id} failed to load:`, e);
                    const target = e.currentTarget;
                    if (target) {
                      target.style.display = 'none';
                      const nextSibling = target.nextElementSibling as HTMLElement;
                      if (nextSibling) {
                        nextSibling.style.display = 'flex';
                      }
                    }
                  }}
                />
                <div className="text-center" style={{display: 'none'}}>
                  <QrCode className="w-24 h-24 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-500">QR Code Preview</p>
                </div>
              </div>
              
              <div className="text-left space-y-2">
                <p><strong>T√™n:</strong> {selectedQRCode.content || `QR ${selectedQRCode.id}`}</p>
                <p><strong>N·ªôi dung:</strong> {selectedQRCode.content}</p>
                <p><strong>Lo·∫°i:</strong> {selectedQRCode.type === 'static' ? 'Tƒ©nh' : 'ƒê·ªông'}</p>
                <p><strong>T·∫°o l√∫c:</strong> {new Date(selectedQRCode.created_at).toLocaleString('vi-VN')}</p>
              </div>
              
              <div className="flex space-x-3 mt-6">
                            <button
                  onClick={() => downloadQR(selectedQRCode)}
                  className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center justify-center space-x-2"
                            >
                              <Download className="w-4 h-4" />
                  <span>T·∫£i xu·ªëng</span>
                            </button>
                            <button
                  onClick={() => printQR(selectedQRCode)}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center justify-center space-x-2"
                            >
                              <Printer className="w-4 h-4" />
                  <span>In</span>
                            </button>
                          </div>
              </div>
          </div>
        </div>
      )}

      {/* Create QR Code Modal */}
      {showCreateQRModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">T·∫°o QR Code m·ªõi</h3>
              <button
                onClick={() => setShowCreateQRModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="space-y-4">
                <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  N·ªôi dung QR Code *
                </label>
                <input
                  type="text"
                  value={qrData.data}
                  onChange={(e) => setQrData({ ...qrData, data: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Nh·∫≠p n·ªôi dung cho QR code"
                  required
                />
                </div>
                
                <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Lo·∫°i QR Code
                </label>
                <select
                  value={qrData.type}
                  onChange={(e) => setQrData({ ...qrData, type: e.target.value as 'static' | 'dynamic' })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="static">Tƒ©nh (Static)</option>
                  <option value="dynamic">ƒê·ªông (Dynamic)</option>
                </select>
                </div>
                
                <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  V·ªã tr√≠ (T√πy ch·ªçn)
                </label>
                <input
                  type="text"
                  value={qrData.location_id}
                  onChange={(e) => setQrData({ ...qrData, location_id: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Nh·∫≠p t√™n v·ªã tr√≠ (t√πy ch·ªçn)"
                />
                </div>
              </div>
              
            <div className="flex space-x-3 mt-6">
              <button
                onClick={() => setShowCreateQRModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                H·ªßy
              </button>
              <button
                onClick={createQRCode}
                disabled={!qrData.data.trim()}
                className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                T·∫°o QR Code
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TasksPage;