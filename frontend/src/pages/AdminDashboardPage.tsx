import React, { useState, useEffect } from 'react';
import { api } from '../utils/api';
import { useAuthStore } from '../stores/authStore';
import toast from 'react-hot-toast';
import FlowStepProgress from '../components/FlowStepProgress';
import CheckinDetailModal from '../components/CheckinDetailModal';
import { PatrolTask } from '../utils/types';

interface CheckinRecord {
  id: number;
  user_name: string;
  user_username: string;
  task_title: string;
  location_name: string;
  check_in_time: string | null;
  check_out_time: string | null;
  photo_url: string | null;  // ·∫¢nh check-in
  checkout_photo_url: string | null;  // ·∫¢nh check-out
  notes: string;
  task_id?: number;
  location_id?: number;
  gps_latitude?: number;
  gps_longitude?: number;
}


const AdminDashboardPage: React.FC = () => {
  const { user } = useAuthStore();
  const [records, setRecords] = useState<CheckinRecord[]>([]);
  const [tasks, setTasks] = useState<PatrolTask[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [newCheckins, setNewCheckins] = useState<CheckinRecord[]>([]);
  const [showTasks, setShowTasks] = useState(false);
  const [selectedCheckinRecord, setSelectedCheckinRecord] = useState<CheckinRecord | null>(null);
  const [showCheckinModal, setShowCheckinModal] = useState(false);

  useEffect(() => {
    if (user?.role === 'admin' || user?.role === 'manager') {
      fetchCheckinRecords();
      fetchTasks();
      
      // Auto refresh every 5 seconds for real-time updates
      const interval = setInterval(() => {
        fetchCheckinRecords(true);
        fetchTasks();
      }, 5000);
      
      // Listen for checkin success events
      const handleCheckinSuccess = (event: CustomEvent) => {
        console.log('üéâ ADMIN: Checkin success event received:', event.detail);
        console.log('üéâ ADMIN: Event detail:', JSON.stringify(event.detail, null, 2));
        
        // Immediate refresh when checkin happens
        Promise.all([
          fetchCheckinRecords(true),
          fetchTasks()
        ]).then(() => {
          console.log('üéâ ADMIN: Data refreshed successfully after checkin');
          toast.success('üîÑ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu sau khi ch·∫•m c√¥ng!');
        }).catch((error) => {
          console.error('‚ùå ADMIN: Error refreshing data:', error);
          toast.error('‚ùå L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu');
        });
      };
      
      window.addEventListener('checkin-success', handleCheckinSuccess as EventListener);
      
      return () => {
        clearInterval(interval);
        window.removeEventListener('checkin-success', handleCheckinSuccess as EventListener);
      };
    }
  }, [user]);

  const fetchCheckinRecords = async (silent = false) => {
    try {
      const response = await api.get('/checkin/admin/all-records');
      const newRecords = response.data;
      
      // Debug: Check records
      console.log('üìä ADMIN: Total records:', newRecords.length);
      console.log('üìä ADMIN: Latest records:', newRecords.slice(0, 3));
      console.log('üìä ADMIN: All records:', newRecords);
      
      if (!silent && records.length > 0) {
        // Check for new checkins
        const newCheckinsFound = newRecords.filter((newRecord: CheckinRecord) => 
          !records.some(record => record.id === newRecord.id)
        );
        
        if (newCheckinsFound.length > 0) {
          setNewCheckins(newCheckinsFound);
          newCheckinsFound.forEach((checkin: CheckinRecord) => {
            toast.success(
              `üéâ ${checkin.user_name} v·ª´a ho√†n th√†nh nhi·ªám v·ª• "${checkin.task_title}"!`,
              { duration: 5000 }
            );
          });
        }
      }
      
      setRecords(newRecords);
      setLastUpdate(new Date());
    } catch (error: any) {
      console.error('Error fetching checkin records:', error);
      setError(error.response?.data?.detail || 'C√≥ l·ªói x·∫£y ra');
    } finally {
      setLoading(false);
    }
  };

  const fetchTasks = async () => {
    try {
      console.log('üîç ADMIN DASHBOARD: Fetching tasks...');
      const response = await api.get('/patrol-tasks/');
      const list = response.data as any[];

      console.log('üîç ADMIN DASHBOARD: Fetched tasks:', list);
      list.forEach((task, index) => {
        console.log(`üîç ADMIN DASHBOARD: Task ${index + 1}:`, {
          id: task.id,
          title: task.title,
          stops: task.stops,
          stopsLength: task.stops ? task.stops.length : 0
        });
      });

      setTasks(list);
      console.log('üìã Tasks fetched:', list.length);
      console.log('üìã Task details:', list.map(t => ({ id: t.id, title: t.title, stops: t.stops?.length || 0 })));
      console.log('üìã All tasks:', list);
    } catch (error: any) {
      console.error('‚ùå ADMIN DASHBOARD: Error fetching tasks:', error);
      console.error('‚ùå ADMIN DASHBOARD: Error response:', error.response);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch nhi·ªám v·ª•: ' + (error.response?.data?.detail || error.message));
    }
  };

  const deleteTask = async (taskId: number) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nhi·ªám v·ª• n√†y?')) {
      return;
    }
    
    try {
      await api.delete(`/patrol-tasks/${taskId}`);
      toast.success('X√≥a nhi·ªám v·ª• th√†nh c√¥ng!');
      fetchTasks();
    } catch (error: any) {
      console.error('Error deleting task:', error);
      toast.error('Kh√¥ng th·ªÉ x√≥a nhi·ªám v·ª•: ' + (error.response?.data?.detail || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    }
  };

  const deleteRecord = async (recordId: number) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b·∫£n ghi ch·∫•m c√¥ng n√†y?')) {
      return;
    }
    
    try {
      await api.delete(`/patrol-records/${recordId}`);
      toast.success('X√≥a b·∫£n ghi ch·∫•m c√¥ng th√†nh c√¥ng!');
      fetchCheckinRecords();
    } catch (error: any) {
      console.error('Error deleting record:', error);
      toast.error('Kh√¥ng th·ªÉ x√≥a b·∫£n ghi: ' + (error.response?.data?.detail || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    }
  };

  const formatDateTime = (dateString: string) => {
    try {
      if (!dateString) return '-'
      const d = new Date(dateString)
      if (isNaN(d.getTime())) return '-'
      // S·ª≠ d·ª•ng m√∫i gi·ªù Vi·ªát Nam (UTC+7)
      return d.toLocaleString('vi-VN', {
        timeZone: 'Asia/Ho_Chi_Minh',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    } catch (e) {
      return '-'
    }
  };

  const findCheckinRecord = (taskId: number, locationId: number, scheduledTime?: string, taskCreatedAt?: string): CheckinRecord | null => {
    // LOGIC ƒê∆†N GI·∫¢N: T√¨m checkin record cho task v√† location, kh√¥ng c·∫ßn ki·ªÉm tra th·ªùi gian ph·ª©c t·∫°p
    console.log('üîç Finding checkin record for task:', taskId, 'location:', locationId);
    
    // T√¨m t·∫•t c·∫£ checkin records cho task v√† location n√†y
    const matchingRecords = records.filter(record => 
      record.task_id === taskId && 
      record.location_id === locationId &&
      record.check_in_time // Ph·∫£i c√≥ check_in_time
    );
    
    console.log('üìã Matching records count:', matchingRecords.length);
    console.log('Available records:', records.map(r => ({
      id: r.id,
      task_id: r.task_id,
      location_id: r.location_id,
      check_in_time: r.check_in_time,
      check_out_time: r.check_out_time,
      photo_url: r.photo_url
    })));
    
    if (matchingRecords.length > 0) {
      // L·∫•y record ƒë·∫ßu ti√™n (ho·∫∑c c√≥ th·ªÉ l·∫•y record m·ªõi nh·∫•t)
      const found = matchingRecords[0];
      console.log('‚úÖ Found checkin record:', {
        task_id: found.task_id,
        location_id: found.location_id,
        check_in_time: found.check_in_time,
        check_out_time: found.check_out_time,
        photo_url: found.photo_url
      });
      return found;
    }
    
    console.log('‚ùå No checkin record found');
    return null;
  };

  const updateTaskStatus = async (taskId: number, status: string) => {
    try {
      await api.put(`/patrol-tasks/${taskId}`, { status });
      console.log(`‚úÖ Updated task ${taskId} status to ${status}`);
    } catch (error) {
      console.error(`‚ùå Error updating task ${taskId} status:`, error);
    }
  };

  // H√†m ki·ªÉm tra tr·∫°ng th√°i v·ªã tr√≠ d·ª±a tr√™n th·ªùi gian
  const getLocationStatus = (stop: any, task: any) => {
    // console.log(`üîç getLocationStatus called for task ${task.id}, stop ${stop.location_id}, sequence ${stop.sequence}`);
    // console.log('üîç Stop data:', stop);
    // console.log('üîç Task data:', { id: task.id, title: task.title });
    // Ki·ªÉm tra null safety
    if (!stop || !task) {
      return { status: 'pending', color: 'gray', text: 'Ch∆∞a x√°c ƒë·ªãnh' };
    }
    
  // S·ª¨ D·ª§NG H√ÄM findCheckinRecord ƒê√É ƒê∆Ø·ª¢C S·ª¨A
  const hasCheckin = findCheckinRecord(task.id, stop.location_id, stop.scheduled_time, task.created_at);
    // S·ª≠ d·ª•ng m√∫i gi·ªù Vi·ªát Nam (UTC+7)
    const now = new Date();
    
    const vietnamTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Ho_Chi_Minh"}));
    const currentDate = vietnamTime.toISOString().split('T')[0]; // YYYY-MM-DD
    const currentTime = vietnamTime.getHours() * 60 + vietnamTime.getMinutes(); // ph√∫t trong ng√†y
    
    // Debug: Check current time
    
    // L·∫•y th·ªùi gian d·ª± ki·∫øn cho m·ªëc n√†y
    let scheduledTime = null;
    if (stop.scheduled_time && stop.scheduled_time !== 'Ch∆∞a x√°c ƒë·ªãnh') {
      const [scheduledHour, scheduledMinute] = stop.scheduled_time.split(':').map(Number);
      scheduledTime = scheduledHour * 60 + scheduledMinute; // ph√∫t trong ng√†y
      // Using stop.scheduled_time
    } else {
      // T√≠nh to√°n d·ª±a tr√™n sequence n·∫øu kh√¥ng c√≥ scheduled_time
      try {
        const schedule = JSON.parse(task.schedule_week);
        if (schedule.startTime) {
          const startHour = parseInt(schedule.startTime.split(':')[0]);
          const startMinute = parseInt(schedule.startTime.split(':')[1]);
          const stopHour = startHour + stop.sequence;
          scheduledTime = stopHour * 60 + startMinute;
          // Calculated from schedule
        }
      } catch (e) {
        // Error parsing schedule
      }
    }
    
    // L·∫•y ng√†y c·ªßa task t·ª´ created_at
    let taskDate = null;
    try {
      if (task.created_at) {
        const taskCreatedDate = new Date(task.created_at);
        taskDate = taskCreatedDate.toISOString().split('T')[0];
      }
    } catch (e) {
      console.log('Error parsing task date:', e);
    }
    
    // N·∫øu ch∆∞a ch·∫•m c√¥ng
    if (!scheduledTime) {
      return { status: 'pending', color: 'gray', text: 'Ch∆∞a x√°c ƒë·ªãnh' };
    }
    
    // Ki·ªÉm tra ng√†y c·ªßa task so v·ªõi ng√†y hi·ªán t·∫°i
    const isToday = taskDate === currentDate;
    const isPastTask = taskDate && taskDate < currentDate; // Task h√¥m qua ho·∫∑c tr∆∞·ªõc ƒë√≥
    const isFutureTask = taskDate && taskDate > currentDate; // Task t∆∞∆°ng lai
    
    // LOGIC C·ª∞C ƒê∆†N GI·∫¢N: C√≥ checkin record = ho√†n th√†nh (gi·ªëng nh∆∞ Report)
    if (hasCheckin && hasCheckin.check_in_time) {
      console.log(`‚úÖ Location ${stop.location_id} has checkin record - showing as completed`);
      return { status: 'completed', color: 'green', text: 'ƒê√£ ch·∫•m c√¥ng' };
    }
    
    // Ki·ªÉm tra xem c√≥ qu√° h·∫°n kh√¥ng (ch·ªâ √°p d·ª•ng cho task h√¥m nay)
    const isOverdue = isToday && currentTime > scheduledTime + 15; // Qu√° 15 ph√∫t
    
    // N·∫øu qu√° h·∫°n, b√°o "Qu√° h·∫°n" v√† kh√¥ng th·ªÉ check-in n·ªØa
    if (isOverdue) {
      console.log(`‚è∞ Location ${stop.location_id} is overdue - more than 15 minutes past scheduled time`);
      return { status: 'overdue', color: 'red', text: 'Qu√° h·∫°n' };
    }
    
    // Debug: Time calculations
    
    // FALLBACK: Ki·ªÉm tra tr·∫°ng th√°i completed t·ª´ stops (backend ƒë√£ ki·ªÉm tra th·ªùi gian)
    if (stop.completed) {
      console.log(`‚úÖ Task ${task.id} stop ${stop.location_id} is completed from stops:`, stop);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i task n·∫øu c·∫ßn
      if (task.status !== 'completed') {
        console.log(`üîÑ Updating task ${task.id} status to completed`);
        // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i task
        updateTaskStatus(task.id, 'completed');
      }
      
      return { status: 'completed', color: 'green', text: 'ƒê√£ ch·∫•m c√¥ng' };
    }
    
    // X·ª≠ l√Ω task qu√° kh·ª© (h√¥m qua ho·∫∑c tr∆∞·ªõc ƒë√≥) - CH·ªà n·∫øu ch∆∞a ch·∫•m c√¥ng
    if (isPastTask) {
      // Ki·ªÉm tra l·∫°i xem c√≥ checkin record kh√¥ng (double check)
      if (hasCheckin && hasCheckin.check_in_time) {
        console.log('‚úÖ PAST TASK COMPLETED: Task h√¥m qua ƒë√£ ch·∫•m c√¥ng');
        return { status: 'completed', color: 'green', text: 'ƒê√£ ch·∫•m c√¥ng' };
      } else {
        console.log('üî¥ PAST TASK OVERDUE: Task h√¥m qua ch∆∞a ch·∫•m c√¥ng');
        return { status: 'overdue', color: 'red', text: 'Qu√° h·∫°n (ch∆∞a ch·∫•m c√¥ng)' };
      }
    }
    
    // X·ª≠ l√Ω task t∆∞∆°ng lai
    if (isFutureTask) {
      console.log('‚ö™ FUTURE TASK: Ch∆∞a ƒë·∫øn ng√†y');
      return { status: 'pending', color: 'gray', text: 'Ch∆∞a ƒë·∫øn ng√†y' };
    }
    
    // X·ª≠ l√Ω task h√¥m nay
    if (isToday) {
      // N·∫øu ch∆∞a ch·∫•m c√¥ng
      if (isOverdue) {
        console.log('üî¥ OVERDUE: Past deadline');
        return { status: 'overdue', color: 'red', text: 'Ch∆∞a ch·∫•m c√¥ng (qu√° h·∫°n)' };
      } else {
        console.log('üîµ PENDING: Waiting for checkin');
        return { status: 'pending', color: 'blue', text: 'Ch·ªù ch·∫•m c√¥ng' };
      }
    }
    
    // Fallback - kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng√†y
    console.log('‚ö™ UNKNOWN: Cannot determine task date');
    return { status: 'pending', color: 'gray', text: 'Ch∆∞a x√°c ƒë·ªãnh' };
  };

  const handleStepClick = async (step: any) => {
    console.log('üîç ADMIN: handleStepClick called with step:', step);
    console.log('üîç ADMIN: step.taskId:', step.taskId);
    console.log('üîç ADMIN: step.locationId:', step.locationId);
    console.log('üîç ADMIN: step.scheduledTime:', step.scheduledTime);
    
    if (step.taskId && step.locationId) {
      // T√¨m task ƒë·ªÉ l·∫•y created_at
      const task = tasks.find(t => t.id === step.taskId);
      let record = findCheckinRecord(step.taskId, step.locationId, step.scheduledTime, task?.created_at);
      console.log('üîç ADMIN: Found record:', record);
      console.log('üîç ADMIN: Record photo_url:', record?.photo_url);
      
      // N·∫øu kh√¥ng t√¨m th·∫•y record trong local state, th·ª≠ fetch t·ª´ API
      if (!record) {
        console.log('üîç ADMIN: Record not found in local state, fetching from API...');
        try {
          const response = await api.get('/checkin/admin/all-records');
          const allRecords = response.data;
          console.log('üîç ADMIN: All records from API:', allRecords.length);
          
          // LOGIC TH√îNG MINH: Ch·ªâ hi·ªÉn th·ªã check-in cho m·ªëc th·ªùi gian g·∫ßn nh·∫•t
          const allLocationRecords = allRecords.filter((r: any) => 
            r.location_id === step.locationId
          );
          console.log('üîç ADMIN: Location records found:', allLocationRecords.length);
          console.log('üîç ADMIN: Location records:', allLocationRecords);
          
          if (allLocationRecords.length > 0) {
            // N·∫øu c√≥ nhi·ªÅu records, t√¨m record c√≥ th·ªùi gian g·∫ßn nh·∫•t v·ªõi scheduled_time c·ªßa stop
            const stopScheduledTime = step.scheduledTime;
            if (stopScheduledTime && stopScheduledTime !== 'Ch∆∞a x√°c ƒë·ªãnh') {
              const scheduledHour = parseInt(stopScheduledTime.split(':')[0]);
              const scheduledMinute = parseInt(stopScheduledTime.split(':')[1]);
              const scheduledTimeInMinutes = scheduledHour * 60 + scheduledMinute;
              
              record = allLocationRecords.reduce((closest: any, current: any) => {
                if (!current.check_in_time) return closest;
                
                const checkinTime = new Date(current.check_in_time);
                const checkinTimeInMinutes = checkinTime.getHours() * 60 + checkinTime.getMinutes();
                
                const currentDiff = Math.abs(checkinTimeInMinutes - scheduledTimeInMinutes);
                const closestDiff = closest ? Math.abs(
                  new Date(closest.check_in_time).getHours() * 60 + 
                  new Date(closest.check_in_time).getMinutes() - scheduledTimeInMinutes
                ) : Infinity;
                
                return currentDiff < closestDiff ? current : closest;
              }, null);
              
              // Ch·ªâ hi·ªÉn th·ªã n·∫øu check-in trong v√≤ng 15 ph√∫t t·ª´ th·ªùi gian ƒë∆∞·ª£c giao
              if (record && record.check_in_time) {
                const checkinDate = new Date(record.check_in_time);
                const checkinHour = checkinDate.getHours();
                const checkinMinute = checkinDate.getMinutes();
                const checkinTimeInMinutes = checkinHour * 60 + checkinMinute;
                
                // Ki·ªÉm tra xem check-in c√≥ trong v√≤ng 15 ph√∫t t·ª´ scheduled_time kh√¥ng
                const timeDiff = checkinTimeInMinutes - scheduledTimeInMinutes;
                console.log('üîç ADMIN: Time diff:', timeDiff, 'minutes');
                
                // Ch·ªâ hi·ªÉn th·ªã n·∫øu check-in trong kho·∫£ng 0-15 ph√∫t sau scheduled_time
                if (timeDiff < 0 || timeDiff > 15) {
                  console.log('üîç ADMIN: Record rejected due to time diff:', timeDiff);
                  record = null;
                }
              }
            }
          }
          
          console.log('üîç ADMIN: Found record from API:', record);
          console.log('üîç ADMIN: Final record photo_url:', record?.photo_url);
        } catch (error) {
          console.error('Error fetching records from API:', error);
        }
      }
      
      console.log('üîç ADMIN: Final record to show in modal:', record);
      console.log('üîç ADMIN: Final record photo_url:', record?.photo_url);
      
      // Logic ƒë∆°n gi·∫£n: N·∫øu c√≥ checkin record th√¨ hi·ªÉn th·ªã
      if (record) {
        // T√¨m task ƒë·ªÉ l·∫•y th√¥ng tin stop
        const task = tasks.find(t => t.id === step.taskId);
        const stop = task?.stops?.find(s => s.location_id === step.locationId);
        
        console.log(`‚úÖ Showing checkin record for Stop ${stop?.sequence} (${stop?.scheduled_time}) - Has checkin record`);
        
        // T·∫°o record v·ªõi th√¥ng tin ƒë∆°n gi·∫£n
        const enhancedRecord: CheckinRecord = {
          ...record,
          notes: `V·ªã tr√≠ "${step.name}" ƒë√£ ƒë∆∞·ª£c ch·∫•m c√¥ng. Th·ªùi gian: ${record.check_in_time ? new Date(record.check_in_time).toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' }) : 'Ch∆∞a x√°c ƒë·ªãnh'}. Tr·∫°ng th√°i: ƒê√£ ho√†n th√†nh`
        };
        
        console.log('üîç ADMIN: Enhanced record photo_url:', enhancedRecord.photo_url);
        console.log('üîç ADMIN: Enhanced record:', enhancedRecord);
        
        setSelectedCheckinRecord(enhancedRecord);
        setShowCheckinModal(true);
      } else {
        // T√¨m task ƒë·ªÉ l·∫•y th√¥ng tin
        const task = tasks.find(t => t.id === step.taskId);
        console.log('Found task:', task);
        
        // T·∫°o record gi·∫£ ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin v·ªã tr√≠ ch∆∞a ch·∫•m c√¥ng
        const mockRecord: CheckinRecord = {
          id: 0,
          user_name: task?.assigned_user_name || 'Nh√¢n vi√™n',
          user_username: 'user',
          task_title: task?.title || 'Nhi·ªám v·ª•',
          location_name: step.name,
          check_in_time: null, // S·ª≠ d·ª•ng null thay v√¨ empty string
          check_out_time: null,
          photo_url: null,
          checkout_photo_url: null,
          notes: `V·ªã tr√≠ "${step.name}" ch∆∞a ƒë∆∞·ª£c ch·∫•m c√¥ng. Th·ªùi gian d·ª± ki·∫øn: ${step.scheduledTime || 'Ch∆∞a x√°c ƒë·ªãnh'}. Tr·∫°ng th√°i: ${step.statusText || 'Ch∆∞a x√°c ƒë·ªãnh'}`,
          gps_latitude: undefined,
          gps_longitude: undefined
        };
        console.log('Showing mock record:', mockRecord);
        setSelectedCheckinRecord(mockRecord);
        setShowCheckinModal(true);
      }
    } else {
      console.log('Missing taskId or locationId:', { taskId: step.taskId, locationId: step.locationId });
    }
  };

  const getStatusBadge = (record: CheckinRecord) => {
    if (record.check_out_time) {
      return <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">Ho√†n th√†nh</span>;
    } else {
      return <span className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">ƒêang l√†m</span>;
    }
  };

  if (user?.role !== 'admin' && user?.role !== 'manager') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600 mb-4">Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h1>
          <p className="text-gray-600">Ch·ªâ admin v√† manager m·ªõi ƒë∆∞·ª£c truy c·∫≠p trang n√†y</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header v·ªõi th√¥ng tin real-time */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">üìä Admin Dashboard</h1>
              <p className="mt-2 text-gray-600">Qu·∫£n l√Ω ch·∫•m c√¥ng v√† tu·∫ßn tra real-time</p>
            </div>
            <div className="text-right">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    console.log('üîÑ Manual refresh triggered');
                    fetchCheckinRecords();
                    fetchTasks();
                    toast.success('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu');
                  }}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
                >
                  üîÑ L√†m m·ªõi
                </button>
                <div>
                  <div className="text-sm text-gray-500">C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</div>
                  <div className="text-sm font-medium text-gray-700">
                    {lastUpdate ? lastUpdate.toLocaleTimeString('vi-VN') : '-'}
                  </div>
                  <div className="flex items-center mt-1">
                    <div className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                    <span className="text-xs text-green-600">Auto-refresh: 10s</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Th·ªëng k√™ nhanh */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">T·ªïng ch·∫•m c√¥ng</p>
                <p className="text-2xl font-bold text-gray-900">{records.length}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Ho√†n th√†nh</p>
                <p className="text-2xl font-bold text-gray-900">
                  {records.filter(r => r.check_out_time).length}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center">
              <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">ƒêang l√†m</p>
                <p className="text-2xl font-bold text-gray-900">
                  {records.filter(r => !r.check_out_time).length}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center">
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">H√¥m nay</p>
                <p className="text-2xl font-bold text-gray-900">
                  {records.filter(r => {
                    const today = new Date().toDateString();
                    return r.check_in_time && new Date(r.check_in_time).toDateString() === today;
                  }).length}
                </p>
              </div>
            </div>
          </div>
        </div>

        {error && (
          <div className="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        )}

        {/* FlowStep Progress Section */}
        <div className="mb-8">
          <div className="bg-white shadow-xl rounded-2xl overflow-hidden">
            <div className="px-6 py-6 bg-gradient-to-r from-green-600 to-blue-600 text-white">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-xl font-bold">
                    üöÄ Ti·∫øn tr√¨nh nhi·ªám v·ª• tu·∫ßn tra
                  </h2>
                  <p className="text-green-100 mt-1">
                    Theo d√µi ti·∫øn tr√¨nh th·ª±c hi·ªán nhi·ªám v·ª• c·ªßa nh√¢n vi√™n theo th·ªùi gian th·ª±c
                  </p>
                </div>
                <div className="text-right">
                  <div className="text-sm text-green-100">T·ªïng nhi·ªám v·ª•</div>
                  <div className="text-2xl font-bold">{tasks.length}</div>
                </div>
              </div>
            </div>
            
            <div className="p-4 sm:p-6 space-y-4 sm:space-y-6">
              {tasks.length > 0 ? (
                tasks.map((task) => (
                  <div key={task.id} className={`border rounded-lg p-3 sm:p-4 hover:shadow-md transition-shadow ${
                    (() => {
                      const status = getLocationStatus(task.stops?.[0], task);
                      return status?.color === 'red' ? 'border-red-300 bg-red-50' :
                             status?.color === 'green' ? 'border-green-300 bg-green-50' :
                             status?.color === 'blue' ? 'border-blue-300 bg-blue-50' :
                             'border-gray-200';
                    })()
                  }`}>
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 space-y-2 sm:space-y-0">
                      <div className="flex-1 min-w-0">
                        <h3 className="text-base sm:text-lg font-semibold text-gray-900 truncate">{task.title}</h3>
                        <div className="flex flex-col sm:flex-row sm:items-center space-y-1 sm:space-y-0 sm:space-x-2 text-xs sm:text-sm text-gray-600">
                          <span>Nh√¢n vi√™n: {(task as any).assigned_user?.full_name || (task as any).assigned_user?.username || 'Ch∆∞a giao'}</span>
                          <span className="hidden sm:inline">‚Ä¢</span>
                          <span>L·ªãch: {(() => {
                            try {
                              const schedule = JSON.parse(task.schedule_week);
                              const dateObj = new Date(schedule.date);
                              const formattedDate = dateObj.toLocaleDateString('vi-VN', {
                                timeZone: 'Asia/Ho_Chi_Minh',
                                year: 'numeric',
                                month: '2-digit',
                                day: '2-digit'
                              });
                              return `${formattedDate} | ${schedule.startTime} - ${schedule.endTime}`;
                            } catch (e) {
                              return task.schedule_week;
                            }
                          })()}</span>
                          <span className="hidden sm:inline">‚Ä¢</span>
                          <span className="flex items-center">
                            Tr·∫°ng th√°i: 
                            <span className={`ml-1 px-2 py-1 text-xs rounded-full ${
                              (() => {
                                const status = getLocationStatus(task.stops?.[0], task);
                                return status.color === 'red' ? 'bg-red-100 text-red-800' :
                                       status.color === 'green' ? 'bg-green-100 text-green-800' :
                                       status.color === 'blue' ? 'bg-blue-100 text-blue-800' :
                                       'bg-yellow-100 text-yellow-800';
                              })()
                            }`}>
                              {(() => {
                                const status = getLocationStatus(task.stops?.[0], task);
                                return status.text;
                              })()}
                            </span>
                          </span>
                        </div>
                      </div>
                      <button 
                        onClick={() => deleteTask(task.id)}
                        className="text-red-600 hover:text-red-800 text-sm self-start sm:self-auto"
                      >
                        X√≥a
                      </button>
                    </div>
                    
                    {task.stops && task.stops.length > 0 ? (
                      <FlowStepProgress
                        steps={task.stops
                          .sort((a, b) => a.sequence - b.sequence)
                          .map((stop, index) => {
                            const status = getLocationStatus(stop, task);
                            
                            // Lu√¥n cho ph√©p b·∫•m ƒë·ªÉ xem th√¥ng tin chi ti·∫øt
                            // Logic ki·ªÉm tra th·ªùi gian s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong handleStepClick
                            const canClick = true;
                            
                            // L·∫•y th·ªùi gian c·ª• th·ªÉ cho t·ª´ng m·ªëc
                            let scheduledTime = 'Ch∆∞a x√°c ƒë·ªãnh';
                            
                            // ∆Øu ti√™n scheduled_time c·ªßa stop tr∆∞·ªõc
                            if (stop.scheduled_time) {
                              scheduledTime = stop.scheduled_time;
                            } else {
                              // N·∫øu kh√¥ng c√≥, t√≠nh to√°n d·ª±a tr√™n sequence
                              try {
                                const schedule = JSON.parse(task.schedule_week);
                                if (schedule.startTime) {
                                  const startHour = parseInt(schedule.startTime.split(':')[0]);
                                  const startMinute = parseInt(schedule.startTime.split(':')[1]);
                                  
                                  // T√≠nh th·ªùi gian cho m·ªëc n√†y (m·ªói m·ªëc c√°ch nhau 1 gi·ªù)
                                  const stopHour = startHour + stop.sequence;
                                  const formattedHour = String(stopHour).padStart(2, '0');
                                  const formattedMinute = String(startMinute).padStart(2, '0');
                                  
                                  scheduledTime = `${formattedHour}:${formattedMinute}`;
                                }
                              } catch (e) {
                                scheduledTime = 'Ch∆∞a x√°c ƒë·ªãnh';
                              }
                            }

                            // LOGIC TH√îNG MINH: Ch·ªâ hi·ªÉn th·ªã check-in cho m·ªëc th·ªùi gian g·∫ßn nh·∫•t
                            let latestCheckin = null;
                            
                            // T√¨m T·∫§T C·∫¢ check-in records cho location n√†y
                            const allLocationRecords = records.filter(record => 
                              record.location_id === stop.location_id &&
                              record.check_in_time
                            );
                            
                            if (allLocationRecords.length > 0 && stop.scheduled_time && stop.scheduled_time !== 'Ch∆∞a x√°c ƒë·ªãnh') {
                              // T√¨m check-in record g·∫ßn nh·∫•t v·ªõi th·ªùi gian ƒë∆∞·ª£c giao
                              const scheduledHour = parseInt(stop.scheduled_time.split(':')[0]);
                              const scheduledMinute = parseInt(stop.scheduled_time.split(':')[1]);
                              const scheduledTimeInMinutes = scheduledHour * 60 + scheduledMinute;
                              
                              // T√¨m check-in record c√≥ th·ªùi gian g·∫ßn nh·∫•t v·ªõi scheduled_time
                              latestCheckin = allLocationRecords.reduce((closest: any, current) => {
                                if (!current.check_in_time) return closest;
                                
                                const checkinDate = new Date(current.check_in_time);
                                const checkinHour = checkinDate.getHours();
                                const checkinMinute = checkinDate.getMinutes();
                                const checkinTimeInMinutes = checkinHour * 60 + checkinMinute;
                                
                                const currentDiff = Math.abs(checkinTimeInMinutes - scheduledTimeInMinutes);
                                const closestDiff = closest ? Math.abs(
                                  new Date(closest.check_in_time).getHours() * 60 + 
                                  new Date(closest.check_in_time).getMinutes() - scheduledTimeInMinutes
                                ) : Infinity;
                                
                                return currentDiff < closestDiff ? current : closest;
                              }, null);
                              
                              // Ch·ªâ hi·ªÉn th·ªã n·∫øu check-in trong v√≤ng 15 ph√∫t t·ª´ th·ªùi gian ƒë∆∞·ª£c giao
                              if (latestCheckin) {
                                const checkinDate = new Date(latestCheckin.check_in_time);
                                const checkinHour = checkinDate.getHours();
                                const checkinMinute = checkinDate.getMinutes();
                                const checkinTimeInMinutes = checkinHour * 60 + checkinMinute;
                                
                                // Ki·ªÉm tra xem check-in c√≥ trong v√≤ng 15 ph√∫t t·ª´ scheduled_time kh√¥ng
                                const timeDiff = checkinTimeInMinutes - scheduledTimeInMinutes;
                                
                                // Ch·ªâ hi·ªÉn th·ªã n·∫øu check-in trong kho·∫£ng 0-15 ph√∫t sau scheduled_time
                                if (timeDiff < 0 || timeDiff > 15) {
                                  latestCheckin = null;
                                }
                              }
                            }
                            
                            // Debug: Ki·ªÉm tra th·ªùi gian hi·ªÉn th·ªã
                            console.log(`üîç Stop ${stop.sequence} (${stop.location_id}):`, {
                              scheduled_time: stop.scheduled_time,
                              completed_at: (stop as any).completed_at,
                              latestCheckin_time: latestCheckin?.check_in_time,
                              latestCheckin_photo: latestCheckin?.photo_url,
                              final_completedAt: latestCheckin?.check_in_time || (stop as any).completed_at
                            });
                            
                            return {
                              id: `stop-${task.id}-${stop.location_id}-${stop.sequence}`,
                              name: stop.location_name,
                              completed: latestCheckin !== null, // C√≥ checkin record = completed
                              completedAt: latestCheckin?.check_in_time || undefined, // Hi·ªÉn th·ªã th·ªùi gian th·ª±c t·∫ø ch·∫•m c√¥ng
                              completedBy: (task as any).assigned_user?.full_name || (task as any).assigned_user?.username || 'Nh√¢n vi√™n',
                              isActive: status.status === 'active',
                              isOverdue: status.status === 'overdue',
                              locationId: stop.location_id,
                              taskId: task.id,
                              scheduledTime: scheduledTime,
                              statusText: status.text,
                              statusColor: status.color,
                              photoUrl: latestCheckin?.photo_url || null, // Ch·ªâ hi·ªÉn th·ªã ·∫£nh khi c√≥ checkin h·ª£p l·ªá
                              taskCreatedAt: task.created_at, // Th√™m th·ªùi gian t·∫°o nhi·ªám v·ª•
                              onStepClick: canClick ? handleStepClick : undefined
                            };
                          })
                        }
                      />
                    ) : (
                      <div className="text-center text-gray-500 py-8">
                        <div className="text-sm">Nhi·ªám v·ª• ƒë∆°n gi·∫£n - kh√¥ng c√≥ ƒëi·ªÉm d·ª´ng</div>
                        <div className="text-xs mt-1">V·ªã tr√≠: {task.location_name || 'Ch∆∞a x√°c ƒë·ªãnh'}</div>
                      </div>
                    )}
                  </div>
                ))
              ) : (
                <div className="text-center text-gray-500 py-8">
                  <div className="text-lg">Ch∆∞a c√≥ nhi·ªám v·ª• n√†o</div>
                  <div className="text-sm mt-1">T·∫°o nhi·ªám v·ª• m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu theo d√µi ti·∫øn tr√¨nh</div>
                </div>
              )}
            </div>
          </div>
        </div>

      </div>

      {/* Checkin Detail Modal */}
      <CheckinDetailModal
        isOpen={showCheckinModal}
        onClose={() => {
          setShowCheckinModal(false);
          setSelectedCheckinRecord(null);
        }}
        record={selectedCheckinRecord as any}
      />

    </div>
  );
};

export default AdminDashboardPage;
