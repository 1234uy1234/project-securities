import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../stores/authStore';
import { ArrowLeft, Camera, CheckCircle, AlertCircle, Trash2, User } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import SimpleFaceAuthModal from '../components/SimpleFaceAuthModal';

const FaceAuthSettingsPage: React.FC = () => {
  const { user } = useAuthStore();
  const navigate = useNavigate();
  const [faceStatus, setFaceStatus] = useState<{
    has_face_data: boolean;
    registered_at?: string;
    image_path?: string;
  } | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showRegisterModal, setShowRegisterModal] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const fetchFaceStatus = async () => {
    try {
      setIsLoading(true);
      
      // S·ª≠ d·ª•ng axios v·ªõi authentication
      const { api } = await import('../utils/api');
      const response = await api.get('/face-auth/status');
      const data = response.data;
      
      console.log('üì∏ Face status for current user:', data);
      setFaceStatus(data);
    } catch (error) {
      console.error('Error fetching face status:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin khu√¥n m·∫∑t');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegisterSuccess = () => {
    fetchFaceStatus();
    toast.success('ƒêƒÉng k√Ω khu√¥n m·∫∑t th√†nh c√¥ng!');
  };

  const handleDeleteFaceData = async () => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªØ li·ªáu khu√¥n m·∫∑t? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {
      return;
    }

    try {
      setIsDeleting(true);
      
      // L·∫•y token t·ª´ auth store
      const token = useAuthStore.getState().token || localStorage.getItem('access_token');
      
      if (!token) {
        toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
        return;
      }

      const response = await fetch('https://10.10.68.72:8000/api/face-auth/unregister', {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();

      if (data.success) {
        toast.success('X√≥a d·ªØ li·ªáu khu√¥n m·∫∑t th√†nh c√¥ng');
        fetchFaceStatus();
      } else {
        toast.error(data.message || 'C√≥ l·ªói x·∫£y ra');
      }
    } catch (error) {
      console.error('Error deleting face data:', error);
      toast.error('Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu khu√¥n m·∫∑t');
    } finally {
      setIsDeleting(false);
    }
  };

  useEffect(() => {
    fetchFaceStatus();
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang t·∫£i...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => navigate(-1)}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <ArrowLeft className="w-5 h-5" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">C√†i ƒë·∫∑t khu√¥n m·∫∑t</h1>
              <p className="text-gray-600">Qu·∫£n l√Ω x√°c th·ª±c khu√¥n m·∫∑t cho t√†i kho·∫£n c·ªßa b·∫°n</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* User Info */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          <div className="flex items-center space-x-4">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
              <User className="w-8 h-8 text-blue-600" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-gray-900">{user?.full_name}</h2>
              <p className="text-gray-600">@{user?.username}</p>
              <p className="text-sm text-gray-500 capitalize">{user?.role}</p>
            </div>
          </div>
        </div>

        {/* Face Auth Status */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Tr·∫°ng th√°i khu√¥n m·∫∑t</h3>
          
          {faceStatus?.has_face_data ? (
            <div className="space-y-4">
              <div className="flex items-center space-x-3 p-4 bg-green-50 border border-green-200 rounded-lg">
                <CheckCircle className="w-6 h-6 text-green-600" />
                <div>
                  <p className="font-medium text-green-800">ƒê√£ ƒëƒÉng k√Ω khu√¥n m·∫∑t</p>
                  <p className="text-sm text-green-600">
                    ƒêƒÉng k√Ω l√∫c: {new Date(faceStatus.registered_at!).toLocaleString('vi-VN')}
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <button
                  onClick={() => setShowRegisterModal(true)}
                  className="flex items-center justify-center space-x-2 p-4 border border-blue-300 text-blue-700 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors"
                >
                  <Camera className="w-5 h-5" />
                  <span>C·∫≠p nh·∫≠t khu√¥n m·∫∑t</span>
                </button>

                <button
                  onClick={handleDeleteFaceData}
                  disabled={isDeleting}
                  className="flex items-center justify-center space-x-2 p-4 border border-red-300 text-red-700 bg-red-50 rounded-lg hover:bg-red-100 transition-colors disabled:opacity-50"
                >
                  {isDeleting ? (
                    <div className="w-5 h-5 border-2 border-red-600 border-t-transparent rounded-full animate-spin"></div>
                  ) : (
                    <Trash2 className="w-5 h-5" />
                  )}
                  <span>X√≥a d·ªØ li·ªáu</span>
                </button>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="flex items-center space-x-3 p-4 bg-orange-50 border border-orange-200 rounded-lg">
                <AlertCircle className="w-6 h-6 text-orange-600" />
                <div>
                  <p className="font-medium text-orange-800">Ch∆∞a ƒëƒÉng k√Ω khu√¥n m·∫∑t</p>
                  <p className="text-sm text-orange-600">
                    ƒêƒÉng k√Ω khu√¥n m·∫∑t ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ƒëƒÉng nh·∫≠p nhanh
                  </p>
                </div>
              </div>

              <button
                onClick={() => setShowRegisterModal(true)}
                className="w-full flex items-center justify-center space-x-2 p-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Camera className="w-5 h-5" />
                <span>ƒêƒÉng k√Ω khu√¥n m·∫∑t</span>
              </button>
            </div>
          )}
        </div>

        {/* Instructions */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
          <div className="space-y-2 text-sm text-blue-800">
            <p>‚Ä¢ <strong>ƒêƒÉng k√Ω khu√¥n m·∫∑t:</strong> Ch·ª•p ·∫£nh khu√¥n m·∫∑t r√µ n√©t, ƒë·∫£m b·∫£o √°nh s√°ng ƒë·ªß</p>
            <p>‚Ä¢ <strong>ƒêƒÉng nh·∫≠p nhanh:</strong> S·ª≠ d·ª•ng khu√¥n m·∫∑t ƒë·ªÉ ƒëƒÉng nh·∫≠p thay v√¨ nh·∫≠p m·∫≠t kh·∫©u</p>
            <p>‚Ä¢ <strong>B·∫£o m·∫≠t:</strong> D·ªØ li·ªáu khu√¥n m·∫∑t ƒë∆∞·ª£c m√£ h√≥a v√† l∆∞u tr·ªØ an to√†n</p>
            <p>‚Ä¢ <strong>C·∫≠p nh·∫≠t:</strong> C√≥ th·ªÉ c·∫≠p nh·∫≠t khu√¥n m·∫∑t b·∫•t k·ª≥ l√∫c n√†o</p>
          </div>
        </div>
      </div>

      {/* Register Modal */}
      <SimpleFaceAuthModal
        isOpen={showRegisterModal}
        onClose={() => setShowRegisterModal(false)}
        onSuccess={() => {}}
        onRegisterSuccess={handleRegisterSuccess}
        mode="register"
        username={user?.username} // Truy·ªÅn username t·ª´ auth store
      />
    </div>
  );
};

export default FaceAuthSettingsPage;
