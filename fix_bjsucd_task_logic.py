#!/usr/bin/env python3
"""
Script s·ª≠a l·ªói logic task "bjsucd" - g√°n ƒë√∫ng task_id cho checkin records
"""

import sqlite3
from datetime import datetime

def fix_bjsucd_task_logic():
    conn = sqlite3.connect('backend/app.db')
    cursor = conn.cursor()
    
    print("üîß S·ª¨A L·ªñI LOGIC TASK 'bjsucd'")
    print("================================")
    
    # 1. Ki·ªÉm tra task "bjsucd"
    cursor.execute("SELECT * FROM patrol_tasks WHERE title LIKE '%bjsucd%'")
    bjsucd_task = cursor.fetchone()
    
    if not bjsucd_task:
        print("‚ùå Kh√¥ng t√¨m th·∫•y task 'bjsucd'")
        return
    
    task_id, title, description, location_id, assigned_to, status, created_at = bjsucd_task
    print(f"‚úÖ T√¨m th·∫•y task 'bjsucd': ID={task_id}, Status={status}, Created={created_at}")
    
    # 2. T√¨m checkin records ƒë∆∞·ª£c t·∫°o sau khi task "bjsucd" ƒë∆∞·ª£c t·∫°o
    cursor.execute("""
        SELECT id, task_id, location_id, check_in_time, photo_path
        FROM patrol_records 
        WHERE check_in_time >= ? AND photo_path IS NOT NULL AND photo_path != ''
        ORDER BY check_in_time ASC
    """, (created_at,))
    
    records = cursor.fetchall()
    print(f"\nüìã T√¨m th·∫•y {len(records)} checkin records sau khi task 'bjsucd' ƒë∆∞·ª£c t·∫°o:")
    
    for record in records:
        record_id, current_task_id, record_location_id, checkin_time, photo_path = record
        print(f"   Record {record_id}: Task {current_task_id}, Location {record_location_id}, Time {checkin_time}")
    
    # 3. T√¨m checkin record ph√π h·ª£p nh·∫•t v·ªõi task "bjsucd"
    # ∆Øu ti√™n record c√≥ location_id gi·ªëng v·ªõi task v√† th·ªùi gian g·∫ßn nh·∫•t
    suitable_records = []
    for record in records:
        record_id, current_task_id, record_location_id, checkin_time, photo_path = record
        
        # Ki·ªÉm tra location_id c√≥ kh·ªõp kh√¥ng
        if record_location_id == location_id:
            suitable_records.append(record)
    
    if not suitable_records:
        print("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y checkin record ph√π h·ª£p v·ªõi location_id c·ªßa task 'bjsucd'")
        print("   C√≥ th·ªÉ c·∫ßn ki·ªÉm tra logic t·∫°o task ho·∫∑c checkin")
        return
    
    # 4. Ch·ªçn record ph√π h·ª£p nh·∫•t (g·∫ßn nh·∫•t v·ªõi th·ªùi gian t·∫°o task)
    best_record = suitable_records[0]  # L·∫•y record ƒë·∫ßu ti√™n (g·∫ßn nh·∫•t)
    record_id, current_task_id, record_location_id, checkin_time, photo_path = best_record
    
    print(f"\nüéØ Ch·ªçn record {record_id} ƒë·ªÉ g√°n cho task 'bjsucd':")
    print(f"   - Th·ªùi gian checkin: {checkin_time}")
    print(f"   - ·∫¢nh: {photo_path}")
    print(f"   - Location: {record_location_id}")
    
    # 5. C·∫≠p nh·∫≠t task_id cho record
    cursor.execute("""
        UPDATE patrol_records 
        SET task_id = ? 
        WHERE id = ?
    """, (task_id, record_id))
    
    # 6. C·∫≠p nh·∫≠t tr·∫°ng th√°i task
    cursor.execute("""
        UPDATE patrol_tasks 
        SET status = 'completed' 
        WHERE id = ?
    """, (task_id,))
    
    # 7. C·∫≠p nh·∫≠t tr·∫°ng th√°i stop
    cursor.execute("""
        UPDATE patrol_task_stops 
        SET completed = 1, completed_at = ? 
        WHERE task_id = ?
    """, (checkin_time, task_id))
    
    conn.commit()
    
    print(f"\n‚úÖ ƒê√£ s·ª≠a xong:")
    print(f"   - G√°n record {record_id} cho task 'bjsucd' (ID: {task_id})")
    print(f"   - C·∫≠p nh·∫≠t status task th√†nh 'completed'")
    print(f"   - C·∫≠p nh·∫≠t stop th√†nh completed")
    
    # 8. Ki·ªÉm tra k·∫øt qu·∫£
    cursor.execute("""
        SELECT pr.id, pr.task_id, pr.check_in_time, pr.photo_path, pt.title
        FROM patrol_records pr
        LEFT JOIN patrol_tasks pt ON pr.task_id = pt.id
        WHERE pr.id = ?
    """, (record_id,))
    
    result = cursor.fetchone()
    if result:
        print(f"\nüîç K·∫øt qu·∫£ sau khi s·ª≠a:")
        print(f"   Record {result[0]}: Task {result[1]} ({result[4]}), Time {result[2]}, Photo {result[3]}")
    
    conn.close()
    print("\nüéâ Ho√†n th√†nh!")

if __name__ == "__main__":
    fix_bjsucd_task_logic()
