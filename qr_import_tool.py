#!/usr/bin/env python3
"""
Script ƒë·ªÉ import QR codes v√†o database sau khi restore
"""

import os
import json
import requests
from datetime import datetime

class QRCodeImporter:
    def __init__(self, api_base_url="https://localhost:8000/api"):
        self.api_base_url = api_base_url
        
    def login(self, username="admin", password="admin123"):
        """ƒêƒÉng nh·∫≠p v√† l·∫•y token"""
        try:
            response = requests.post(
                f"{self.api_base_url}/auth/login",
                json={"username": username, "password": password},
                verify=False
            )
            response.raise_for_status()
            token = response.json()["access_token"]
            self.headers = {"Authorization": f"Bearer {token}"}
            print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói ƒëƒÉng nh·∫≠p: {e}")
            return False
    
    def import_qr_codes(self, restore_info_file):
        """Import QR codes t·ª´ restore info v√†o database"""
        print(f"üîÑ B·∫Øt ƒë·∫ßu import t·ª´: {restore_info_file}")
        
        try:
            with open(restore_info_file, 'r', encoding='utf-8') as f:
                restore_data = json.load(f)
            
            qr_codes = restore_data["qr_codes"]
            imported_count = 0
            
            for qr in qr_codes:
                try:
                    # T·∫°o QR code m·ªõi trong database
                    response = requests.post(
                        f"{self.api_base_url}/qr-codes/generate-simple",
                        params={
                            "data": qr["data"],
                            "type": qr["type"]
                        },
                        headers=self.headers,
                        verify=False
                    )
                    
                    if response.status_code == 200:
                        new_qr = response.json()
                        print(f"‚úÖ Imported: {qr['data']} -> ID {new_qr['id']}")
                        imported_count += 1
                    else:
                        print(f"‚ö†Ô∏è Failed to import: {qr['data']} - {response.text}")
                        
                except Exception as e:
                    print(f"‚ùå Error importing {qr['data']}: {e}")
            
            print(f"‚úÖ Import ho√†n th√†nh: {imported_count}/{len(qr_codes)} QR codes")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói import: {e}")
            return False
    
    def check_existing_qr_codes(self):
        """Ki·ªÉm tra QR codes hi·ªán c√≥ trong database"""
        try:
            response = requests.get(
                f"{self.api_base_url}/qr-codes/",
                headers=self.headers,
                verify=False
            )
            response.raise_for_status()
            qr_codes = response.json()
            
            print(f"üìä QR codes hi·ªán c√≥ trong database: {len(qr_codes)}")
            for qr in qr_codes:
                print(f"  - ID {qr['id']}: {qr['data']} ({qr['type']})")
            
            return qr_codes
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra: {e}")
            return []

def main():
    importer = QRCodeImporter()
    
    print("üîß QR Code Database Importer")
    print("=" * 40)
    
    # ƒêƒÉng nh·∫≠p
    if not importer.login():
        return
    
    # Ki·ªÉm tra QR codes hi·ªán c√≥
    print("\nüìã QR codes hi·ªán c√≥:")
    importer.check_existing_qr_codes()
    
    # T√¨m restore info files
    backup_dir = "qr_backup"
    restore_files = []
    
    if os.path.exists(backup_dir):
        for root, dirs, files in os.walk(backup_dir):
            for file in files:
                if file == "restore_info.json":
                    restore_files.append(os.path.join(root, file))
    
    if not restore_files:
        print("\n‚ùå Kh√¥ng t√¨m th·∫•y restore_info.json files")
        return
    
    print(f"\nüìÅ T√¨m th·∫•y {len(restore_files)} restore files:")
    for i, file in enumerate(restore_files, 1):
        print(f"  {i}. {file}")
    
    try:
        idx = int(input("\nCh·ªçn restore file (s·ªë): ")) - 1
        if 0 <= idx < len(restore_files):
            importer.import_qr_codes(restore_files[idx])
        else:
            print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")

if __name__ == "__main__":
    main()
